// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BVEvent.proto

#ifndef PROTOBUF_BVEvent_2eproto__INCLUDED
#define PROTOBUF_BVEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "PUConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace BVCU {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BVEvent_2eproto();
void protobuf_AssignDesc_BVEvent_2eproto();
void protobuf_ShutdownFile_BVEvent_2eproto();

class Event_Source;
class Event_SourceSaved;
class Event_Action_PURecord;
class Event_Action_EventRecord;
class Event_Action_AlertOut;
class Event_Action_Email;
class Event_Action_Snapshot;
class Event_Action_SMS;
class Event_Action_PTZ;
class Event_Action_AudioOut;
class Event_Action_ShowMsg;
class Event_Action_Custom;
class Event_Action;
class Event_LinkAction_Base;
class Event_LinkAction;
class Event_LinkAction_Notify;

// ===================================================================

class Event_Source : public ::google::protobuf::Message {
 public:
  Event_Source();
  virtual ~Event_Source();
  
  Event_Source(const Event_Source& from);
  
  inline Event_Source& operator=(const Event_Source& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Source& default_instance();
  
  void Swap(Event_Source* other);
  
  // implements Message ----------------------------------------------
  
  Event_Source* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Source& from);
  void MergeFrom(const Event_Source& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 iEventType = 1;
  inline bool has_ieventtype() const;
  inline void clear_ieventtype();
  static const int kIEventTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ieventtype() const;
  inline void set_ieventtype(::google::protobuf::uint32 value);
  
  // optional .BVCU.PUConfig.WallTime stTime = 2;
  inline bool has_sttime() const;
  inline void clear_sttime();
  static const int kStTimeFieldNumber = 2;
  inline const ::BVCU::PUConfig::WallTime& sttime() const;
  inline ::BVCU::PUConfig::WallTime* mutable_sttime();
  inline ::BVCU::PUConfig::WallTime* release_sttime();
  
  // optional string szID = 3;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 3;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iSubDevIdx = 4;
  inline bool has_isubdevidx() const;
  inline void clear_isubdevidx();
  static const int kISubDevIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 isubdevidx() const;
  inline void set_isubdevidx(::google::protobuf::uint32 value);
  
  // optional uint32 iValue = 5;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIValueFieldNumber = 5;
  inline ::google::protobuf::uint32 ivalue() const;
  inline void set_ivalue(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Source)
 private:
  inline void set_has_ieventtype();
  inline void clear_has_ieventtype();
  inline void set_has_sttime();
  inline void clear_has_sttime();
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_isubdevidx();
  inline void clear_has_isubdevidx();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BVCU::PUConfig::WallTime* sttime_;
  ::google::protobuf::uint32 ieventtype_;
  ::google::protobuf::uint32 isubdevidx_;
  ::std::string* szid_;
  ::google::protobuf::uint32 ivalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Source* default_instance_;
};
// -------------------------------------------------------------------

class Event_SourceSaved : public ::google::protobuf::Message {
 public:
  Event_SourceSaved();
  virtual ~Event_SourceSaved();
  
  Event_SourceSaved(const Event_SourceSaved& from);
  
  inline Event_SourceSaved& operator=(const Event_SourceSaved& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_SourceSaved& default_instance();
  
  void Swap(Event_SourceSaved* other);
  
  // implements Message ----------------------------------------------
  
  Event_SourceSaved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_SourceSaved& from);
  void MergeFrom(const Event_SourceSaved& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BVCU.Event_Source stEvent = 1;
  inline bool has_stevent() const;
  inline void clear_stevent();
  static const int kStEventFieldNumber = 1;
  inline const ::BVCU::Event_Source& stevent() const;
  inline ::BVCU::Event_Source* mutable_stevent();
  inline ::BVCU::Event_Source* release_stevent();
  
  // optional uint32 iEventIndex = 2;
  inline bool has_ieventindex() const;
  inline void clear_ieventindex();
  static const int kIEventIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 ieventindex() const;
  inline void set_ieventindex(::google::protobuf::uint32 value);
  
  // optional uint32 bProcessed = 3;
  inline bool has_bprocessed() const;
  inline void clear_bprocessed();
  static const int kBProcessedFieldNumber = 3;
  inline ::google::protobuf::uint32 bprocessed() const;
  inline void set_bprocessed(::google::protobuf::uint32 value);
  
  // optional string szProcesserID = 4;
  inline bool has_szprocesserid() const;
  inline void clear_szprocesserid();
  static const int kSzProcesserIDFieldNumber = 4;
  inline const ::std::string& szprocesserid() const;
  inline void set_szprocesserid(const ::std::string& value);
  inline void set_szprocesserid(const char* value);
  inline void set_szprocesserid(const char* value, size_t size);
  inline ::std::string* mutable_szprocesserid();
  inline ::std::string* release_szprocesserid();
  
  // optional string szProcesserDesc = 5;
  inline bool has_szprocesserdesc() const;
  inline void clear_szprocesserdesc();
  static const int kSzProcesserDescFieldNumber = 5;
  inline const ::std::string& szprocesserdesc() const;
  inline void set_szprocesserdesc(const ::std::string& value);
  inline void set_szprocesserdesc(const char* value);
  inline void set_szprocesserdesc(const char* value, size_t size);
  inline ::std::string* mutable_szprocesserdesc();
  inline ::std::string* release_szprocesserdesc();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_SourceSaved)
 private:
  inline void set_has_stevent();
  inline void clear_has_stevent();
  inline void set_has_ieventindex();
  inline void clear_has_ieventindex();
  inline void set_has_bprocessed();
  inline void clear_has_bprocessed();
  inline void set_has_szprocesserid();
  inline void clear_has_szprocesserid();
  inline void set_has_szprocesserdesc();
  inline void clear_has_szprocesserdesc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BVCU::Event_Source* stevent_;
  ::google::protobuf::uint32 ieventindex_;
  ::google::protobuf::uint32 bprocessed_;
  ::std::string* szprocesserid_;
  ::std::string* szprocesserdesc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_SourceSaved* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_PURecord : public ::google::protobuf::Message {
 public:
  Event_Action_PURecord();
  virtual ~Event_Action_PURecord();
  
  Event_Action_PURecord(const Event_Action_PURecord& from);
  
  inline Event_Action_PURecord& operator=(const Event_Action_PURecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_PURecord& default_instance();
  
  void Swap(Event_Action_PURecord* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_PURecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_PURecord& from);
  void MergeFrom(const Event_Action_PURecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional uint32 iPreRecord = 3;
  inline bool has_iprerecord() const;
  inline void clear_iprerecord();
  static const int kIPreRecordFieldNumber = 3;
  inline ::google::protobuf::uint32 iprerecord() const;
  inline void set_iprerecord(::google::protobuf::uint32 value);
  
  // optional uint32 iPostRecord = 4;
  inline bool has_ipostrecord() const;
  inline void clear_ipostrecord();
  static const int kIPostRecordFieldNumber = 4;
  inline ::google::protobuf::uint32 ipostrecord() const;
  inline void set_ipostrecord(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_PURecord)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_iprerecord();
  inline void clear_has_iprerecord();
  inline void set_has_ipostrecord();
  inline void clear_has_ipostrecord();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::google::protobuf::uint32 iindex_;
  ::google::protobuf::uint32 iprerecord_;
  ::google::protobuf::uint32 ipostrecord_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_PURecord* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_EventRecord : public ::google::protobuf::Message {
 public:
  Event_Action_EventRecord();
  virtual ~Event_Action_EventRecord();
  
  Event_Action_EventRecord(const Event_Action_EventRecord& from);
  
  inline Event_Action_EventRecord& operator=(const Event_Action_EventRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_EventRecord& default_instance();
  
  void Swap(Event_Action_EventRecord* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_EventRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_EventRecord& from);
  void MergeFrom(const Event_Action_EventRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szPUID = 1;
  inline bool has_szpuid() const;
  inline void clear_szpuid();
  static const int kSzPUIDFieldNumber = 1;
  inline const ::std::string& szpuid() const;
  inline void set_szpuid(const ::std::string& value);
  inline void set_szpuid(const char* value);
  inline void set_szpuid(const char* value, size_t size);
  inline ::std::string* mutable_szpuid();
  inline ::std::string* release_szpuid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional string szNRUID = 3;
  inline bool has_sznruid() const;
  inline void clear_sznruid();
  static const int kSzNRUIDFieldNumber = 3;
  inline const ::std::string& sznruid() const;
  inline void set_sznruid(const ::std::string& value);
  inline void set_sznruid(const char* value);
  inline void set_sznruid(const char* value, size_t size);
  inline ::std::string* mutable_sznruid();
  inline ::std::string* release_sznruid();
  
  // optional uint32 iFileLen = 4;
  inline bool has_ifilelen() const;
  inline void clear_ifilelen();
  static const int kIFileLenFieldNumber = 4;
  inline ::google::protobuf::uint32 ifilelen() const;
  inline void set_ifilelen(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_EventRecord)
 private:
  inline void set_has_szpuid();
  inline void clear_has_szpuid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_sznruid();
  inline void clear_has_sznruid();
  inline void set_has_ifilelen();
  inline void clear_has_ifilelen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szpuid_;
  ::std::string* sznruid_;
  ::google::protobuf::uint32 iindex_;
  ::google::protobuf::uint32 ifilelen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_EventRecord* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_AlertOut : public ::google::protobuf::Message {
 public:
  Event_Action_AlertOut();
  virtual ~Event_Action_AlertOut();
  
  Event_Action_AlertOut(const Event_Action_AlertOut& from);
  
  inline Event_Action_AlertOut& operator=(const Event_Action_AlertOut& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_AlertOut& default_instance();
  
  void Swap(Event_Action_AlertOut* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_AlertOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_AlertOut& from);
  void MergeFrom(const Event_Action_AlertOut& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional uint32 bAction = 3;
  inline bool has_baction() const;
  inline void clear_baction();
  static const int kBActionFieldNumber = 3;
  inline ::google::protobuf::uint32 baction() const;
  inline void set_baction(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_AlertOut)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_baction();
  inline void clear_has_baction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::google::protobuf::uint32 iindex_;
  ::google::protobuf::uint32 baction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_AlertOut* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_Email : public ::google::protobuf::Message {
 public:
  Event_Action_Email();
  virtual ~Event_Action_Email();
  
  Event_Action_Email(const Event_Action_Email& from);
  
  inline Event_Action_Email& operator=(const Event_Action_Email& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_Email& default_instance();
  
  void Swap(Event_Action_Email* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_Email* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_Email& from);
  void MergeFrom(const Event_Action_Email& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szReceiverAddr = 1;
  inline bool has_szreceiveraddr() const;
  inline void clear_szreceiveraddr();
  static const int kSzReceiverAddrFieldNumber = 1;
  inline const ::std::string& szreceiveraddr() const;
  inline void set_szreceiveraddr(const ::std::string& value);
  inline void set_szreceiveraddr(const char* value);
  inline void set_szreceiveraddr(const char* value, size_t size);
  inline ::std::string* mutable_szreceiveraddr();
  inline ::std::string* release_szreceiveraddr();
  
  // optional string sCcAddr = 2;
  inline bool has_sccaddr() const;
  inline void clear_sccaddr();
  static const int kSCcAddrFieldNumber = 2;
  inline const ::std::string& sccaddr() const;
  inline void set_sccaddr(const ::std::string& value);
  inline void set_sccaddr(const char* value);
  inline void set_sccaddr(const char* value, size_t size);
  inline ::std::string* mutable_sccaddr();
  inline ::std::string* release_sccaddr();
  
  // optional string sBccAddr = 3;
  inline bool has_sbccaddr() const;
  inline void clear_sbccaddr();
  static const int kSBccAddrFieldNumber = 3;
  inline const ::std::string& sbccaddr() const;
  inline void set_sbccaddr(const ::std::string& value);
  inline void set_sbccaddr(const char* value);
  inline void set_sbccaddr(const char* value, size_t size);
  inline ::std::string* mutable_sbccaddr();
  inline ::std::string* release_sbccaddr();
  
  // optional string szTitle = 4;
  inline bool has_sztitle() const;
  inline void clear_sztitle();
  static const int kSzTitleFieldNumber = 4;
  inline const ::std::string& sztitle() const;
  inline void set_sztitle(const ::std::string& value);
  inline void set_sztitle(const char* value);
  inline void set_sztitle(const char* value, size_t size);
  inline ::std::string* mutable_sztitle();
  inline ::std::string* release_sztitle();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_Email)
 private:
  inline void set_has_szreceiveraddr();
  inline void clear_has_szreceiveraddr();
  inline void set_has_sccaddr();
  inline void clear_has_sccaddr();
  inline void set_has_sbccaddr();
  inline void clear_has_sbccaddr();
  inline void set_has_sztitle();
  inline void clear_has_sztitle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szreceiveraddr_;
  ::std::string* sccaddr_;
  ::std::string* sbccaddr_;
  ::std::string* sztitle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_Email* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_Snapshot : public ::google::protobuf::Message {
 public:
  Event_Action_Snapshot();
  virtual ~Event_Action_Snapshot();
  
  Event_Action_Snapshot(const Event_Action_Snapshot& from);
  
  inline Event_Action_Snapshot& operator=(const Event_Action_Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_Snapshot& default_instance();
  
  void Swap(Event_Action_Snapshot* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_Snapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_Snapshot& from);
  void MergeFrom(const Event_Action_Snapshot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional uint32 iDuration = 3;
  inline bool has_iduration() const;
  inline void clear_iduration();
  static const int kIDurationFieldNumber = 3;
  inline ::google::protobuf::uint32 iduration() const;
  inline void set_iduration(::google::protobuf::uint32 value);
  
  // optional uint32 bLocal = 4;
  inline bool has_blocal() const;
  inline void clear_blocal();
  static const int kBLocalFieldNumber = 4;
  inline ::google::protobuf::uint32 blocal() const;
  inline void set_blocal(::google::protobuf::uint32 value);
  
  // optional uint32 bUpload = 5;
  inline bool has_bupload() const;
  inline void clear_bupload();
  static const int kBUploadFieldNumber = 5;
  inline ::google::protobuf::uint32 bupload() const;
  inline void set_bupload(::google::protobuf::uint32 value);
  
  // optional uint32 bEmail = 6;
  inline bool has_bemail() const;
  inline void clear_bemail();
  static const int kBEmailFieldNumber = 6;
  inline ::google::protobuf::uint32 bemail() const;
  inline void set_bemail(::google::protobuf::uint32 value);
  
  // optional string szNRUID = 7;
  inline bool has_sznruid() const;
  inline void clear_sznruid();
  static const int kSzNRUIDFieldNumber = 7;
  inline const ::std::string& sznruid() const;
  inline void set_sznruid(const ::std::string& value);
  inline void set_sznruid(const char* value);
  inline void set_sznruid(const char* value, size_t size);
  inline ::std::string* mutable_sznruid();
  inline ::std::string* release_sznruid();
  
  // optional .BVCU.Event_Action_Email stEmail = 8;
  inline bool has_stemail() const;
  inline void clear_stemail();
  static const int kStEmailFieldNumber = 8;
  inline const ::BVCU::Event_Action_Email& stemail() const;
  inline ::BVCU::Event_Action_Email* mutable_stemail();
  inline ::BVCU::Event_Action_Email* release_stemail();
  
  // optional uint32 bAttach = 9;
  inline bool has_battach() const;
  inline void clear_battach();
  static const int kBAttachFieldNumber = 9;
  inline ::google::protobuf::uint32 battach() const;
  inline void set_battach(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_Snapshot)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_iduration();
  inline void clear_has_iduration();
  inline void set_has_blocal();
  inline void clear_has_blocal();
  inline void set_has_bupload();
  inline void clear_has_bupload();
  inline void set_has_bemail();
  inline void clear_has_bemail();
  inline void set_has_sznruid();
  inline void clear_has_sznruid();
  inline void set_has_stemail();
  inline void clear_has_stemail();
  inline void set_has_battach();
  inline void clear_has_battach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::google::protobuf::uint32 iindex_;
  ::google::protobuf::uint32 iduration_;
  ::google::protobuf::uint32 blocal_;
  ::google::protobuf::uint32 bupload_;
  ::std::string* sznruid_;
  ::google::protobuf::uint32 bemail_;
  ::google::protobuf::uint32 battach_;
  ::BVCU::Event_Action_Email* stemail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_Snapshot* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_SMS : public ::google::protobuf::Message {
 public:
  Event_Action_SMS();
  virtual ~Event_Action_SMS();
  
  Event_Action_SMS(const Event_Action_SMS& from);
  
  inline Event_Action_SMS& operator=(const Event_Action_SMS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_SMS& default_instance();
  
  void Swap(Event_Action_SMS* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_SMS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_SMS& from);
  void MergeFrom(const Event_Action_SMS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional string szCardNum = 2;
  inline bool has_szcardnum() const;
  inline void clear_szcardnum();
  static const int kSzCardNumFieldNumber = 2;
  inline const ::std::string& szcardnum() const;
  inline void set_szcardnum(const ::std::string& value);
  inline void set_szcardnum(const char* value);
  inline void set_szcardnum(const char* value, size_t size);
  inline ::std::string* mutable_szcardnum();
  inline ::std::string* release_szcardnum();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_SMS)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_szcardnum();
  inline void clear_has_szcardnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::std::string* szcardnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_SMS* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_PTZ : public ::google::protobuf::Message {
 public:
  Event_Action_PTZ();
  virtual ~Event_Action_PTZ();
  
  Event_Action_PTZ(const Event_Action_PTZ& from);
  
  inline Event_Action_PTZ& operator=(const Event_Action_PTZ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_PTZ& default_instance();
  
  void Swap(Event_Action_PTZ* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_PTZ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_PTZ& from);
  void MergeFrom(const Event_Action_PTZ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional uint32 iCommand = 3;
  inline bool has_icommand() const;
  inline void clear_icommand();
  static const int kICommandFieldNumber = 3;
  inline ::google::protobuf::uint32 icommand() const;
  inline void set_icommand(::google::protobuf::uint32 value);
  
  // optional uint32 iParam = 4;
  inline bool has_iparam() const;
  inline void clear_iparam();
  static const int kIParamFieldNumber = 4;
  inline ::google::protobuf::uint32 iparam() const;
  inline void set_iparam(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_PTZ)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_icommand();
  inline void clear_has_icommand();
  inline void set_has_iparam();
  inline void clear_has_iparam();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::google::protobuf::uint32 iindex_;
  ::google::protobuf::uint32 icommand_;
  ::google::protobuf::uint32 iparam_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_PTZ* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_AudioOut : public ::google::protobuf::Message {
 public:
  Event_Action_AudioOut();
  virtual ~Event_Action_AudioOut();
  
  Event_Action_AudioOut(const Event_Action_AudioOut& from);
  
  inline Event_Action_AudioOut& operator=(const Event_Action_AudioOut& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_AudioOut& default_instance();
  
  void Swap(Event_Action_AudioOut* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_AudioOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_AudioOut& from);
  void MergeFrom(const Event_Action_AudioOut& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_AudioOut)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::google::protobuf::uint32 iindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_AudioOut* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_ShowMsg : public ::google::protobuf::Message {
 public:
  Event_Action_ShowMsg();
  virtual ~Event_Action_ShowMsg();
  
  Event_Action_ShowMsg(const Event_Action_ShowMsg& from);
  
  inline Event_Action_ShowMsg& operator=(const Event_Action_ShowMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_ShowMsg& default_instance();
  
  void Swap(Event_Action_ShowMsg* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_ShowMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_ShowMsg& from);
  void MergeFrom(const Event_Action_ShowMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional string szText = 2;
  inline bool has_sztext() const;
  inline void clear_sztext();
  static const int kSzTextFieldNumber = 2;
  inline const ::std::string& sztext() const;
  inline void set_sztext(const ::std::string& value);
  inline void set_sztext(const char* value);
  inline void set_sztext(const char* value, size_t size);
  inline ::std::string* mutable_sztext();
  inline ::std::string* release_sztext();
  
  // optional uint32 bSoundAlert = 3;
  inline bool has_bsoundalert() const;
  inline void clear_bsoundalert();
  static const int kBSoundAlertFieldNumber = 3;
  inline ::google::protobuf::uint32 bsoundalert() const;
  inline void set_bsoundalert(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_ShowMsg)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_sztext();
  inline void clear_has_sztext();
  inline void set_has_bsoundalert();
  inline void clear_has_bsoundalert();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::std::string* sztext_;
  ::google::protobuf::uint32 bsoundalert_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_ShowMsg* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action_Custom : public ::google::protobuf::Message {
 public:
  Event_Action_Custom();
  virtual ~Event_Action_Custom();
  
  Event_Action_Custom(const Event_Action_Custom& from);
  
  inline Event_Action_Custom& operator=(const Event_Action_Custom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action_Custom& default_instance();
  
  void Swap(Event_Action_Custom* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action_Custom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action_Custom& from);
  void MergeFrom(const Event_Action_Custom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iIndex = 2;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 iindex() const;
  inline void set_iindex(::google::protobuf::uint32 value);
  
  // optional bytes pContentData = 3;
  inline bool has_pcontentdata() const;
  inline void clear_pcontentdata();
  static const int kPContentDataFieldNumber = 3;
  inline const ::std::string& pcontentdata() const;
  inline void set_pcontentdata(const ::std::string& value);
  inline void set_pcontentdata(const char* value);
  inline void set_pcontentdata(const void* value, size_t size);
  inline ::std::string* mutable_pcontentdata();
  inline ::std::string* release_pcontentdata();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action_Custom)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_iindex();
  inline void clear_has_iindex();
  inline void set_has_pcontentdata();
  inline void clear_has_pcontentdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::std::string* pcontentdata_;
  ::google::protobuf::uint32 iindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action_Custom* default_instance_;
};
// -------------------------------------------------------------------

class Event_Action : public ::google::protobuf::Message {
 public:
  Event_Action();
  virtual ~Event_Action();
  
  Event_Action(const Event_Action& from);
  
  inline Event_Action& operator=(const Event_Action& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Action& default_instance();
  
  void Swap(Event_Action* other);
  
  // implements Message ----------------------------------------------
  
  Event_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Action& from);
  void MergeFrom(const Event_Action& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 iAction = 1;
  inline bool has_iaction() const;
  inline void clear_iaction();
  static const int kIActionFieldNumber = 1;
  inline ::google::protobuf::uint32 iaction() const;
  inline void set_iaction(::google::protobuf::uint32 value);
  
  // optional uint32 iCount = 2;
  inline bool has_icount() const;
  inline void clear_icount();
  static const int kICountFieldNumber = 2;
  inline ::google::protobuf::uint32 icount() const;
  inline void set_icount(::google::protobuf::uint32 value);
  
  // optional uint32 iDelay = 3;
  inline bool has_idelay() const;
  inline void clear_idelay();
  static const int kIDelayFieldNumber = 3;
  inline ::google::protobuf::uint32 idelay() const;
  inline void set_idelay(::google::protobuf::uint32 value);
  
  // optional uint32 iInterval = 4;
  inline bool has_iinterval() const;
  inline void clear_iinterval();
  static const int kIIntervalFieldNumber = 4;
  inline ::google::protobuf::uint32 iinterval() const;
  inline void set_iinterval(::google::protobuf::uint32 value);
  
  // optional .BVCU.Event_Action_PURecord puRecord = 5;
  inline bool has_purecord() const;
  inline void clear_purecord();
  static const int kPuRecordFieldNumber = 5;
  inline const ::BVCU::Event_Action_PURecord& purecord() const;
  inline ::BVCU::Event_Action_PURecord* mutable_purecord();
  inline ::BVCU::Event_Action_PURecord* release_purecord();
  
  // optional .BVCU.Event_Action_AlertOut alertOut = 6;
  inline bool has_alertout() const;
  inline void clear_alertout();
  static const int kAlertOutFieldNumber = 6;
  inline const ::BVCU::Event_Action_AlertOut& alertout() const;
  inline ::BVCU::Event_Action_AlertOut* mutable_alertout();
  inline ::BVCU::Event_Action_AlertOut* release_alertout();
  
  // optional .BVCU.Event_Action_Snapshot snapshot = 7;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 7;
  inline const ::BVCU::Event_Action_Snapshot& snapshot() const;
  inline ::BVCU::Event_Action_Snapshot* mutable_snapshot();
  inline ::BVCU::Event_Action_Snapshot* release_snapshot();
  
  // optional .BVCU.Event_Action_PTZ ptz = 8;
  inline bool has_ptz() const;
  inline void clear_ptz();
  static const int kPtzFieldNumber = 8;
  inline const ::BVCU::Event_Action_PTZ& ptz() const;
  inline ::BVCU::Event_Action_PTZ* mutable_ptz();
  inline ::BVCU::Event_Action_PTZ* release_ptz();
  
  // optional .BVCU.Event_Action_AudioOut audioOut = 9;
  inline bool has_audioout() const;
  inline void clear_audioout();
  static const int kAudioOutFieldNumber = 9;
  inline const ::BVCU::Event_Action_AudioOut& audioout() const;
  inline ::BVCU::Event_Action_AudioOut* mutable_audioout();
  inline ::BVCU::Event_Action_AudioOut* release_audioout();
  
  // optional .BVCU.Event_Action_SMS sms = 10;
  inline bool has_sms() const;
  inline void clear_sms();
  static const int kSmsFieldNumber = 10;
  inline const ::BVCU::Event_Action_SMS& sms() const;
  inline ::BVCU::Event_Action_SMS* mutable_sms();
  inline ::BVCU::Event_Action_SMS* release_sms();
  
  // optional .BVCU.Event_Action_Email email = 11;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 11;
  inline const ::BVCU::Event_Action_Email& email() const;
  inline ::BVCU::Event_Action_Email* mutable_email();
  inline ::BVCU::Event_Action_Email* release_email();
  
  // optional .BVCU.Event_Action_ShowMsg showMsg = 12;
  inline bool has_showmsg() const;
  inline void clear_showmsg();
  static const int kShowMsgFieldNumber = 12;
  inline const ::BVCU::Event_Action_ShowMsg& showmsg() const;
  inline ::BVCU::Event_Action_ShowMsg* mutable_showmsg();
  inline ::BVCU::Event_Action_ShowMsg* release_showmsg();
  
  // optional .BVCU.Event_Action_EventRecord eventRecord = 13;
  inline bool has_eventrecord() const;
  inline void clear_eventrecord();
  static const int kEventRecordFieldNumber = 13;
  inline const ::BVCU::Event_Action_EventRecord& eventrecord() const;
  inline ::BVCU::Event_Action_EventRecord* mutable_eventrecord();
  inline ::BVCU::Event_Action_EventRecord* release_eventrecord();
  
  // optional .BVCU.Event_Action_Custom custom = 14;
  inline bool has_custom() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 14;
  inline const ::BVCU::Event_Action_Custom& custom() const;
  inline ::BVCU::Event_Action_Custom* mutable_custom();
  inline ::BVCU::Event_Action_Custom* release_custom();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_Action)
 private:
  inline void set_has_iaction();
  inline void clear_has_iaction();
  inline void set_has_icount();
  inline void clear_has_icount();
  inline void set_has_idelay();
  inline void clear_has_idelay();
  inline void set_has_iinterval();
  inline void clear_has_iinterval();
  inline void set_has_purecord();
  inline void clear_has_purecord();
  inline void set_has_alertout();
  inline void clear_has_alertout();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_ptz();
  inline void clear_has_ptz();
  inline void set_has_audioout();
  inline void clear_has_audioout();
  inline void set_has_sms();
  inline void clear_has_sms();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_showmsg();
  inline void clear_has_showmsg();
  inline void set_has_eventrecord();
  inline void clear_has_eventrecord();
  inline void set_has_custom();
  inline void clear_has_custom();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 iaction_;
  ::google::protobuf::uint32 icount_;
  ::google::protobuf::uint32 idelay_;
  ::google::protobuf::uint32 iinterval_;
  ::BVCU::Event_Action_PURecord* purecord_;
  ::BVCU::Event_Action_AlertOut* alertout_;
  ::BVCU::Event_Action_Snapshot* snapshot_;
  ::BVCU::Event_Action_PTZ* ptz_;
  ::BVCU::Event_Action_AudioOut* audioout_;
  ::BVCU::Event_Action_SMS* sms_;
  ::BVCU::Event_Action_Email* email_;
  ::BVCU::Event_Action_ShowMsg* showmsg_;
  ::BVCU::Event_Action_EventRecord* eventrecord_;
  ::BVCU::Event_Action_Custom* custom_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_Action* default_instance_;
};
// -------------------------------------------------------------------

class Event_LinkAction_Base : public ::google::protobuf::Message {
 public:
  Event_LinkAction_Base();
  virtual ~Event_LinkAction_Base();
  
  Event_LinkAction_Base(const Event_LinkAction_Base& from);
  
  inline Event_LinkAction_Base& operator=(const Event_LinkAction_Base& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkAction_Base& default_instance();
  
  void Swap(Event_LinkAction_Base* other);
  
  // implements Message ----------------------------------------------
  
  Event_LinkAction_Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_LinkAction_Base& from);
  void MergeFrom(const Event_LinkAction_Base& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szName = 1;
  inline bool has_szname() const;
  inline void clear_szname();
  static const int kSzNameFieldNumber = 1;
  inline const ::std::string& szname() const;
  inline void set_szname(const ::std::string& value);
  inline void set_szname(const char* value);
  inline void set_szname(const char* value, size_t size);
  inline ::std::string* mutable_szname();
  inline ::std::string* release_szname();
  
  // optional uint32 bEnable = 2;
  inline bool has_benable() const;
  inline void clear_benable();
  static const int kBEnableFieldNumber = 2;
  inline ::google::protobuf::uint32 benable() const;
  inline void set_benable(::google::protobuf::uint32 value);
  
  // optional uint32 bInAction = 3;
  inline bool has_binaction() const;
  inline void clear_binaction();
  static const int kBInActionFieldNumber = 3;
  inline ::google::protobuf::uint32 binaction() const;
  inline void set_binaction(::google::protobuf::uint32 value);
  
  // optional .BVCU.PUConfig.WallTime stBegin = 4;
  inline bool has_stbegin() const;
  inline void clear_stbegin();
  static const int kStBeginFieldNumber = 4;
  inline const ::BVCU::PUConfig::WallTime& stbegin() const;
  inline ::BVCU::PUConfig::WallTime* mutable_stbegin();
  inline ::BVCU::PUConfig::WallTime* release_stbegin();
  
  // optional .BVCU.PUConfig.WallTime stEnd = 5;
  inline bool has_stend() const;
  inline void clear_stend();
  static const int kStEndFieldNumber = 5;
  inline const ::BVCU::PUConfig::WallTime& stend() const;
  inline ::BVCU::PUConfig::WallTime* mutable_stend();
  inline ::BVCU::PUConfig::WallTime* release_stend();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_LinkAction_Base)
 private:
  inline void set_has_szname();
  inline void clear_has_szname();
  inline void set_has_benable();
  inline void clear_has_benable();
  inline void set_has_binaction();
  inline void clear_has_binaction();
  inline void set_has_stbegin();
  inline void clear_has_stbegin();
  inline void set_has_stend();
  inline void clear_has_stend();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szname_;
  ::google::protobuf::uint32 benable_;
  ::google::protobuf::uint32 binaction_;
  ::BVCU::PUConfig::WallTime* stbegin_;
  ::BVCU::PUConfig::WallTime* stend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_LinkAction_Base* default_instance_;
};
// -------------------------------------------------------------------

class Event_LinkAction : public ::google::protobuf::Message {
 public:
  Event_LinkAction();
  virtual ~Event_LinkAction();
  
  Event_LinkAction(const Event_LinkAction& from);
  
  inline Event_LinkAction& operator=(const Event_LinkAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkAction& default_instance();
  
  void Swap(Event_LinkAction* other);
  
  // implements Message ----------------------------------------------
  
  Event_LinkAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_LinkAction& from);
  void MergeFrom(const Event_LinkAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BVCU.Event_LinkAction_Base stBase = 1;
  inline bool has_stbase() const;
  inline void clear_stbase();
  static const int kStBaseFieldNumber = 1;
  inline const ::BVCU::Event_LinkAction_Base& stbase() const;
  inline ::BVCU::Event_LinkAction_Base* mutable_stbase();
  inline ::BVCU::Event_LinkAction_Base* release_stbase();
  
  // optional .BVCU.PUConfig.WeekTimeSlice stWeek = 2;
  inline bool has_stweek() const;
  inline void clear_stweek();
  static const int kStWeekFieldNumber = 2;
  inline const ::BVCU::PUConfig::WeekTimeSlice& stweek() const;
  inline ::BVCU::PUConfig::WeekTimeSlice* mutable_stweek();
  inline ::BVCU::PUConfig::WeekTimeSlice* release_stweek();
  
  // repeated .BVCU.Event_Source pSource = 3;
  inline int psource_size() const;
  inline void clear_psource();
  static const int kPSourceFieldNumber = 3;
  inline const ::BVCU::Event_Source& psource(int index) const;
  inline ::BVCU::Event_Source* mutable_psource(int index);
  inline ::BVCU::Event_Source* add_psource();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >&
      psource() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >*
      mutable_psource();
  
  // optional uint32 iSourceInterval = 4;
  inline bool has_isourceinterval() const;
  inline void clear_isourceinterval();
  static const int kISourceIntervalFieldNumber = 4;
  inline ::google::protobuf::uint32 isourceinterval() const;
  inline void set_isourceinterval(::google::protobuf::uint32 value);
  
  // repeated .BVCU.Event_Action pAction = 5;
  inline int paction_size() const;
  inline void clear_paction();
  static const int kPActionFieldNumber = 5;
  inline const ::BVCU::Event_Action& paction(int index) const;
  inline ::BVCU::Event_Action* mutable_paction(int index);
  inline ::BVCU::Event_Action* add_paction();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >&
      paction() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >*
      mutable_paction();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_LinkAction)
 private:
  inline void set_has_stbase();
  inline void clear_has_stbase();
  inline void set_has_stweek();
  inline void clear_has_stweek();
  inline void set_has_isourceinterval();
  inline void clear_has_isourceinterval();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BVCU::Event_LinkAction_Base* stbase_;
  ::BVCU::PUConfig::WeekTimeSlice* stweek_;
  ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source > psource_;
  ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action > paction_;
  ::google::protobuf::uint32 isourceinterval_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_LinkAction* default_instance_;
};
// -------------------------------------------------------------------

class Event_LinkAction_Notify : public ::google::protobuf::Message {
 public:
  Event_LinkAction_Notify();
  virtual ~Event_LinkAction_Notify();
  
  Event_LinkAction_Notify(const Event_LinkAction_Notify& from);
  
  inline Event_LinkAction_Notify& operator=(const Event_LinkAction_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkAction_Notify& default_instance();
  
  void Swap(Event_LinkAction_Notify* other);
  
  // implements Message ----------------------------------------------
  
  Event_LinkAction_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_LinkAction_Notify& from);
  void MergeFrom(const Event_LinkAction_Notify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .BVCU.Event_Source pSource = 1;
  inline int psource_size() const;
  inline void clear_psource();
  static const int kPSourceFieldNumber = 1;
  inline const ::BVCU::Event_Source& psource(int index) const;
  inline ::BVCU::Event_Source* mutable_psource(int index);
  inline ::BVCU::Event_Source* add_psource();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >&
      psource() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >*
      mutable_psource();
  
  // repeated .BVCU.Event_Action pAction = 2;
  inline int paction_size() const;
  inline void clear_paction();
  static const int kPActionFieldNumber = 2;
  inline const ::BVCU::Event_Action& paction(int index) const;
  inline ::BVCU::Event_Action* mutable_paction(int index);
  inline ::BVCU::Event_Action* add_paction();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >&
      paction() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >*
      mutable_paction();
  
  // @@protoc_insertion_point(class_scope:BVCU.Event_LinkAction_Notify)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source > psource_;
  ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action > paction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVEvent_2eproto();
  friend void protobuf_AssignDesc_BVEvent_2eproto();
  friend void protobuf_ShutdownFile_BVEvent_2eproto();
  
  void InitAsDefaultInstance();
  static Event_LinkAction_Notify* default_instance_;
};
// ===================================================================


// ===================================================================

// Event_Source

// optional uint32 iEventType = 1;
inline bool Event_Source::has_ieventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Source::set_has_ieventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Source::clear_has_ieventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Source::clear_ieventtype() {
  ieventtype_ = 0u;
  clear_has_ieventtype();
}
inline ::google::protobuf::uint32 Event_Source::ieventtype() const {
  return ieventtype_;
}
inline void Event_Source::set_ieventtype(::google::protobuf::uint32 value) {
  set_has_ieventtype();
  ieventtype_ = value;
}

// optional .BVCU.PUConfig.WallTime stTime = 2;
inline bool Event_Source::has_sttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Source::set_has_sttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Source::clear_has_sttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Source::clear_sttime() {
  if (sttime_ != NULL) sttime_->::BVCU::PUConfig::WallTime::Clear();
  clear_has_sttime();
}
inline const ::BVCU::PUConfig::WallTime& Event_Source::sttime() const {
  return sttime_ != NULL ? *sttime_ : *default_instance_->sttime_;
}
inline ::BVCU::PUConfig::WallTime* Event_Source::mutable_sttime() {
  set_has_sttime();
  if (sttime_ == NULL) sttime_ = new ::BVCU::PUConfig::WallTime;
  return sttime_;
}
inline ::BVCU::PUConfig::WallTime* Event_Source::release_sttime() {
  clear_has_sttime();
  ::BVCU::PUConfig::WallTime* temp = sttime_;
  sttime_ = NULL;
  return temp;
}

// optional string szID = 3;
inline bool Event_Source::has_szid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Source::set_has_szid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Source::clear_has_szid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Source::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Source::szid() const {
  return *szid_;
}
inline void Event_Source::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Source::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Source::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Source::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Source::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iSubDevIdx = 4;
inline bool Event_Source::has_isubdevidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Source::set_has_isubdevidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Source::clear_has_isubdevidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Source::clear_isubdevidx() {
  isubdevidx_ = 0u;
  clear_has_isubdevidx();
}
inline ::google::protobuf::uint32 Event_Source::isubdevidx() const {
  return isubdevidx_;
}
inline void Event_Source::set_isubdevidx(::google::protobuf::uint32 value) {
  set_has_isubdevidx();
  isubdevidx_ = value;
}

// optional uint32 iValue = 5;
inline bool Event_Source::has_ivalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_Source::set_has_ivalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_Source::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_Source::clear_ivalue() {
  ivalue_ = 0u;
  clear_has_ivalue();
}
inline ::google::protobuf::uint32 Event_Source::ivalue() const {
  return ivalue_;
}
inline void Event_Source::set_ivalue(::google::protobuf::uint32 value) {
  set_has_ivalue();
  ivalue_ = value;
}

// -------------------------------------------------------------------

// Event_SourceSaved

// optional .BVCU.Event_Source stEvent = 1;
inline bool Event_SourceSaved::has_stevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_SourceSaved::set_has_stevent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_SourceSaved::clear_has_stevent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_SourceSaved::clear_stevent() {
  if (stevent_ != NULL) stevent_->::BVCU::Event_Source::Clear();
  clear_has_stevent();
}
inline const ::BVCU::Event_Source& Event_SourceSaved::stevent() const {
  return stevent_ != NULL ? *stevent_ : *default_instance_->stevent_;
}
inline ::BVCU::Event_Source* Event_SourceSaved::mutable_stevent() {
  set_has_stevent();
  if (stevent_ == NULL) stevent_ = new ::BVCU::Event_Source;
  return stevent_;
}
inline ::BVCU::Event_Source* Event_SourceSaved::release_stevent() {
  clear_has_stevent();
  ::BVCU::Event_Source* temp = stevent_;
  stevent_ = NULL;
  return temp;
}

// optional uint32 iEventIndex = 2;
inline bool Event_SourceSaved::has_ieventindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_SourceSaved::set_has_ieventindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_SourceSaved::clear_has_ieventindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_SourceSaved::clear_ieventindex() {
  ieventindex_ = 0u;
  clear_has_ieventindex();
}
inline ::google::protobuf::uint32 Event_SourceSaved::ieventindex() const {
  return ieventindex_;
}
inline void Event_SourceSaved::set_ieventindex(::google::protobuf::uint32 value) {
  set_has_ieventindex();
  ieventindex_ = value;
}

// optional uint32 bProcessed = 3;
inline bool Event_SourceSaved::has_bprocessed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_SourceSaved::set_has_bprocessed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_SourceSaved::clear_has_bprocessed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_SourceSaved::clear_bprocessed() {
  bprocessed_ = 0u;
  clear_has_bprocessed();
}
inline ::google::protobuf::uint32 Event_SourceSaved::bprocessed() const {
  return bprocessed_;
}
inline void Event_SourceSaved::set_bprocessed(::google::protobuf::uint32 value) {
  set_has_bprocessed();
  bprocessed_ = value;
}

// optional string szProcesserID = 4;
inline bool Event_SourceSaved::has_szprocesserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_SourceSaved::set_has_szprocesserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_SourceSaved::clear_has_szprocesserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_SourceSaved::clear_szprocesserid() {
  if (szprocesserid_ != &::google::protobuf::internal::kEmptyString) {
    szprocesserid_->clear();
  }
  clear_has_szprocesserid();
}
inline const ::std::string& Event_SourceSaved::szprocesserid() const {
  return *szprocesserid_;
}
inline void Event_SourceSaved::set_szprocesserid(const ::std::string& value) {
  set_has_szprocesserid();
  if (szprocesserid_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserid_ = new ::std::string;
  }
  szprocesserid_->assign(value);
}
inline void Event_SourceSaved::set_szprocesserid(const char* value) {
  set_has_szprocesserid();
  if (szprocesserid_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserid_ = new ::std::string;
  }
  szprocesserid_->assign(value);
}
inline void Event_SourceSaved::set_szprocesserid(const char* value, size_t size) {
  set_has_szprocesserid();
  if (szprocesserid_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserid_ = new ::std::string;
  }
  szprocesserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_SourceSaved::mutable_szprocesserid() {
  set_has_szprocesserid();
  if (szprocesserid_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserid_ = new ::std::string;
  }
  return szprocesserid_;
}
inline ::std::string* Event_SourceSaved::release_szprocesserid() {
  clear_has_szprocesserid();
  if (szprocesserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szprocesserid_;
    szprocesserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szProcesserDesc = 5;
inline bool Event_SourceSaved::has_szprocesserdesc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_SourceSaved::set_has_szprocesserdesc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_SourceSaved::clear_has_szprocesserdesc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_SourceSaved::clear_szprocesserdesc() {
  if (szprocesserdesc_ != &::google::protobuf::internal::kEmptyString) {
    szprocesserdesc_->clear();
  }
  clear_has_szprocesserdesc();
}
inline const ::std::string& Event_SourceSaved::szprocesserdesc() const {
  return *szprocesserdesc_;
}
inline void Event_SourceSaved::set_szprocesserdesc(const ::std::string& value) {
  set_has_szprocesserdesc();
  if (szprocesserdesc_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserdesc_ = new ::std::string;
  }
  szprocesserdesc_->assign(value);
}
inline void Event_SourceSaved::set_szprocesserdesc(const char* value) {
  set_has_szprocesserdesc();
  if (szprocesserdesc_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserdesc_ = new ::std::string;
  }
  szprocesserdesc_->assign(value);
}
inline void Event_SourceSaved::set_szprocesserdesc(const char* value, size_t size) {
  set_has_szprocesserdesc();
  if (szprocesserdesc_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserdesc_ = new ::std::string;
  }
  szprocesserdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_SourceSaved::mutable_szprocesserdesc() {
  set_has_szprocesserdesc();
  if (szprocesserdesc_ == &::google::protobuf::internal::kEmptyString) {
    szprocesserdesc_ = new ::std::string;
  }
  return szprocesserdesc_;
}
inline ::std::string* Event_SourceSaved::release_szprocesserdesc() {
  clear_has_szprocesserdesc();
  if (szprocesserdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szprocesserdesc_;
    szprocesserdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Event_Action_PURecord

// optional string szID = 1;
inline bool Event_Action_PURecord::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_PURecord::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_PURecord::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_PURecord::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_PURecord::szid() const {
  return *szid_;
}
inline void Event_Action_PURecord::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_PURecord::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_PURecord::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_PURecord::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_PURecord::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_PURecord::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_PURecord::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_PURecord::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_PURecord::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_PURecord::iindex() const {
  return iindex_;
}
inline void Event_Action_PURecord::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional uint32 iPreRecord = 3;
inline bool Event_Action_PURecord::has_iprerecord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_PURecord::set_has_iprerecord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_PURecord::clear_has_iprerecord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_PURecord::clear_iprerecord() {
  iprerecord_ = 0u;
  clear_has_iprerecord();
}
inline ::google::protobuf::uint32 Event_Action_PURecord::iprerecord() const {
  return iprerecord_;
}
inline void Event_Action_PURecord::set_iprerecord(::google::protobuf::uint32 value) {
  set_has_iprerecord();
  iprerecord_ = value;
}

// optional uint32 iPostRecord = 4;
inline bool Event_Action_PURecord::has_ipostrecord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action_PURecord::set_has_ipostrecord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action_PURecord::clear_has_ipostrecord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action_PURecord::clear_ipostrecord() {
  ipostrecord_ = 0u;
  clear_has_ipostrecord();
}
inline ::google::protobuf::uint32 Event_Action_PURecord::ipostrecord() const {
  return ipostrecord_;
}
inline void Event_Action_PURecord::set_ipostrecord(::google::protobuf::uint32 value) {
  set_has_ipostrecord();
  ipostrecord_ = value;
}

// -------------------------------------------------------------------

// Event_Action_EventRecord

// optional string szPUID = 1;
inline bool Event_Action_EventRecord::has_szpuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_EventRecord::set_has_szpuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_EventRecord::clear_has_szpuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_EventRecord::clear_szpuid() {
  if (szpuid_ != &::google::protobuf::internal::kEmptyString) {
    szpuid_->clear();
  }
  clear_has_szpuid();
}
inline const ::std::string& Event_Action_EventRecord::szpuid() const {
  return *szpuid_;
}
inline void Event_Action_EventRecord::set_szpuid(const ::std::string& value) {
  set_has_szpuid();
  if (szpuid_ == &::google::protobuf::internal::kEmptyString) {
    szpuid_ = new ::std::string;
  }
  szpuid_->assign(value);
}
inline void Event_Action_EventRecord::set_szpuid(const char* value) {
  set_has_szpuid();
  if (szpuid_ == &::google::protobuf::internal::kEmptyString) {
    szpuid_ = new ::std::string;
  }
  szpuid_->assign(value);
}
inline void Event_Action_EventRecord::set_szpuid(const char* value, size_t size) {
  set_has_szpuid();
  if (szpuid_ == &::google::protobuf::internal::kEmptyString) {
    szpuid_ = new ::std::string;
  }
  szpuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_EventRecord::mutable_szpuid() {
  set_has_szpuid();
  if (szpuid_ == &::google::protobuf::internal::kEmptyString) {
    szpuid_ = new ::std::string;
  }
  return szpuid_;
}
inline ::std::string* Event_Action_EventRecord::release_szpuid() {
  clear_has_szpuid();
  if (szpuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpuid_;
    szpuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_EventRecord::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_EventRecord::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_EventRecord::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_EventRecord::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_EventRecord::iindex() const {
  return iindex_;
}
inline void Event_Action_EventRecord::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional string szNRUID = 3;
inline bool Event_Action_EventRecord::has_sznruid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_EventRecord::set_has_sznruid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_EventRecord::clear_has_sznruid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_EventRecord::clear_sznruid() {
  if (sznruid_ != &::google::protobuf::internal::kEmptyString) {
    sznruid_->clear();
  }
  clear_has_sznruid();
}
inline const ::std::string& Event_Action_EventRecord::sznruid() const {
  return *sznruid_;
}
inline void Event_Action_EventRecord::set_sznruid(const ::std::string& value) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(value);
}
inline void Event_Action_EventRecord::set_sznruid(const char* value) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(value);
}
inline void Event_Action_EventRecord::set_sznruid(const char* value, size_t size) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_EventRecord::mutable_sznruid() {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  return sznruid_;
}
inline ::std::string* Event_Action_EventRecord::release_sznruid() {
  clear_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sznruid_;
    sznruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iFileLen = 4;
inline bool Event_Action_EventRecord::has_ifilelen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action_EventRecord::set_has_ifilelen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action_EventRecord::clear_has_ifilelen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action_EventRecord::clear_ifilelen() {
  ifilelen_ = 0u;
  clear_has_ifilelen();
}
inline ::google::protobuf::uint32 Event_Action_EventRecord::ifilelen() const {
  return ifilelen_;
}
inline void Event_Action_EventRecord::set_ifilelen(::google::protobuf::uint32 value) {
  set_has_ifilelen();
  ifilelen_ = value;
}

// -------------------------------------------------------------------

// Event_Action_AlertOut

// optional string szID = 1;
inline bool Event_Action_AlertOut::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_AlertOut::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_AlertOut::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_AlertOut::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_AlertOut::szid() const {
  return *szid_;
}
inline void Event_Action_AlertOut::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_AlertOut::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_AlertOut::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_AlertOut::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_AlertOut::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_AlertOut::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_AlertOut::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_AlertOut::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_AlertOut::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_AlertOut::iindex() const {
  return iindex_;
}
inline void Event_Action_AlertOut::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional uint32 bAction = 3;
inline bool Event_Action_AlertOut::has_baction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_AlertOut::set_has_baction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_AlertOut::clear_has_baction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_AlertOut::clear_baction() {
  baction_ = 0u;
  clear_has_baction();
}
inline ::google::protobuf::uint32 Event_Action_AlertOut::baction() const {
  return baction_;
}
inline void Event_Action_AlertOut::set_baction(::google::protobuf::uint32 value) {
  set_has_baction();
  baction_ = value;
}

// -------------------------------------------------------------------

// Event_Action_Email

// optional string szReceiverAddr = 1;
inline bool Event_Action_Email::has_szreceiveraddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_Email::set_has_szreceiveraddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_Email::clear_has_szreceiveraddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_Email::clear_szreceiveraddr() {
  if (szreceiveraddr_ != &::google::protobuf::internal::kEmptyString) {
    szreceiveraddr_->clear();
  }
  clear_has_szreceiveraddr();
}
inline const ::std::string& Event_Action_Email::szreceiveraddr() const {
  return *szreceiveraddr_;
}
inline void Event_Action_Email::set_szreceiveraddr(const ::std::string& value) {
  set_has_szreceiveraddr();
  if (szreceiveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szreceiveraddr_ = new ::std::string;
  }
  szreceiveraddr_->assign(value);
}
inline void Event_Action_Email::set_szreceiveraddr(const char* value) {
  set_has_szreceiveraddr();
  if (szreceiveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szreceiveraddr_ = new ::std::string;
  }
  szreceiveraddr_->assign(value);
}
inline void Event_Action_Email::set_szreceiveraddr(const char* value, size_t size) {
  set_has_szreceiveraddr();
  if (szreceiveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szreceiveraddr_ = new ::std::string;
  }
  szreceiveraddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Email::mutable_szreceiveraddr() {
  set_has_szreceiveraddr();
  if (szreceiveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szreceiveraddr_ = new ::std::string;
  }
  return szreceiveraddr_;
}
inline ::std::string* Event_Action_Email::release_szreceiveraddr() {
  clear_has_szreceiveraddr();
  if (szreceiveraddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szreceiveraddr_;
    szreceiveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sCcAddr = 2;
inline bool Event_Action_Email::has_sccaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_Email::set_has_sccaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_Email::clear_has_sccaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_Email::clear_sccaddr() {
  if (sccaddr_ != &::google::protobuf::internal::kEmptyString) {
    sccaddr_->clear();
  }
  clear_has_sccaddr();
}
inline const ::std::string& Event_Action_Email::sccaddr() const {
  return *sccaddr_;
}
inline void Event_Action_Email::set_sccaddr(const ::std::string& value) {
  set_has_sccaddr();
  if (sccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sccaddr_ = new ::std::string;
  }
  sccaddr_->assign(value);
}
inline void Event_Action_Email::set_sccaddr(const char* value) {
  set_has_sccaddr();
  if (sccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sccaddr_ = new ::std::string;
  }
  sccaddr_->assign(value);
}
inline void Event_Action_Email::set_sccaddr(const char* value, size_t size) {
  set_has_sccaddr();
  if (sccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sccaddr_ = new ::std::string;
  }
  sccaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Email::mutable_sccaddr() {
  set_has_sccaddr();
  if (sccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sccaddr_ = new ::std::string;
  }
  return sccaddr_;
}
inline ::std::string* Event_Action_Email::release_sccaddr() {
  clear_has_sccaddr();
  if (sccaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sccaddr_;
    sccaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sBccAddr = 3;
inline bool Event_Action_Email::has_sbccaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_Email::set_has_sbccaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_Email::clear_has_sbccaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_Email::clear_sbccaddr() {
  if (sbccaddr_ != &::google::protobuf::internal::kEmptyString) {
    sbccaddr_->clear();
  }
  clear_has_sbccaddr();
}
inline const ::std::string& Event_Action_Email::sbccaddr() const {
  return *sbccaddr_;
}
inline void Event_Action_Email::set_sbccaddr(const ::std::string& value) {
  set_has_sbccaddr();
  if (sbccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sbccaddr_ = new ::std::string;
  }
  sbccaddr_->assign(value);
}
inline void Event_Action_Email::set_sbccaddr(const char* value) {
  set_has_sbccaddr();
  if (sbccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sbccaddr_ = new ::std::string;
  }
  sbccaddr_->assign(value);
}
inline void Event_Action_Email::set_sbccaddr(const char* value, size_t size) {
  set_has_sbccaddr();
  if (sbccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sbccaddr_ = new ::std::string;
  }
  sbccaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Email::mutable_sbccaddr() {
  set_has_sbccaddr();
  if (sbccaddr_ == &::google::protobuf::internal::kEmptyString) {
    sbccaddr_ = new ::std::string;
  }
  return sbccaddr_;
}
inline ::std::string* Event_Action_Email::release_sbccaddr() {
  clear_has_sbccaddr();
  if (sbccaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sbccaddr_;
    sbccaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szTitle = 4;
inline bool Event_Action_Email::has_sztitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action_Email::set_has_sztitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action_Email::clear_has_sztitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action_Email::clear_sztitle() {
  if (sztitle_ != &::google::protobuf::internal::kEmptyString) {
    sztitle_->clear();
  }
  clear_has_sztitle();
}
inline const ::std::string& Event_Action_Email::sztitle() const {
  return *sztitle_;
}
inline void Event_Action_Email::set_sztitle(const ::std::string& value) {
  set_has_sztitle();
  if (sztitle_ == &::google::protobuf::internal::kEmptyString) {
    sztitle_ = new ::std::string;
  }
  sztitle_->assign(value);
}
inline void Event_Action_Email::set_sztitle(const char* value) {
  set_has_sztitle();
  if (sztitle_ == &::google::protobuf::internal::kEmptyString) {
    sztitle_ = new ::std::string;
  }
  sztitle_->assign(value);
}
inline void Event_Action_Email::set_sztitle(const char* value, size_t size) {
  set_has_sztitle();
  if (sztitle_ == &::google::protobuf::internal::kEmptyString) {
    sztitle_ = new ::std::string;
  }
  sztitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Email::mutable_sztitle() {
  set_has_sztitle();
  if (sztitle_ == &::google::protobuf::internal::kEmptyString) {
    sztitle_ = new ::std::string;
  }
  return sztitle_;
}
inline ::std::string* Event_Action_Email::release_sztitle() {
  clear_has_sztitle();
  if (sztitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sztitle_;
    sztitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Event_Action_Snapshot

// optional string szID = 1;
inline bool Event_Action_Snapshot::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_Snapshot::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_Snapshot::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_Snapshot::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_Snapshot::szid() const {
  return *szid_;
}
inline void Event_Action_Snapshot::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_Snapshot::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_Snapshot::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Snapshot::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_Snapshot::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_Snapshot::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_Snapshot::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_Snapshot::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_Snapshot::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::iindex() const {
  return iindex_;
}
inline void Event_Action_Snapshot::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional uint32 iDuration = 3;
inline bool Event_Action_Snapshot::has_iduration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_Snapshot::set_has_iduration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_Snapshot::clear_has_iduration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_Snapshot::clear_iduration() {
  iduration_ = 0u;
  clear_has_iduration();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::iduration() const {
  return iduration_;
}
inline void Event_Action_Snapshot::set_iduration(::google::protobuf::uint32 value) {
  set_has_iduration();
  iduration_ = value;
}

// optional uint32 bLocal = 4;
inline bool Event_Action_Snapshot::has_blocal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action_Snapshot::set_has_blocal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action_Snapshot::clear_has_blocal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action_Snapshot::clear_blocal() {
  blocal_ = 0u;
  clear_has_blocal();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::blocal() const {
  return blocal_;
}
inline void Event_Action_Snapshot::set_blocal(::google::protobuf::uint32 value) {
  set_has_blocal();
  blocal_ = value;
}

// optional uint32 bUpload = 5;
inline bool Event_Action_Snapshot::has_bupload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_Action_Snapshot::set_has_bupload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_Action_Snapshot::clear_has_bupload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_Action_Snapshot::clear_bupload() {
  bupload_ = 0u;
  clear_has_bupload();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::bupload() const {
  return bupload_;
}
inline void Event_Action_Snapshot::set_bupload(::google::protobuf::uint32 value) {
  set_has_bupload();
  bupload_ = value;
}

// optional uint32 bEmail = 6;
inline bool Event_Action_Snapshot::has_bemail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event_Action_Snapshot::set_has_bemail() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event_Action_Snapshot::clear_has_bemail() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event_Action_Snapshot::clear_bemail() {
  bemail_ = 0u;
  clear_has_bemail();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::bemail() const {
  return bemail_;
}
inline void Event_Action_Snapshot::set_bemail(::google::protobuf::uint32 value) {
  set_has_bemail();
  bemail_ = value;
}

// optional string szNRUID = 7;
inline bool Event_Action_Snapshot::has_sznruid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event_Action_Snapshot::set_has_sznruid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event_Action_Snapshot::clear_has_sznruid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event_Action_Snapshot::clear_sznruid() {
  if (sznruid_ != &::google::protobuf::internal::kEmptyString) {
    sznruid_->clear();
  }
  clear_has_sznruid();
}
inline const ::std::string& Event_Action_Snapshot::sznruid() const {
  return *sznruid_;
}
inline void Event_Action_Snapshot::set_sznruid(const ::std::string& value) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(value);
}
inline void Event_Action_Snapshot::set_sznruid(const char* value) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(value);
}
inline void Event_Action_Snapshot::set_sznruid(const char* value, size_t size) {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  sznruid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Snapshot::mutable_sznruid() {
  set_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    sznruid_ = new ::std::string;
  }
  return sznruid_;
}
inline ::std::string* Event_Action_Snapshot::release_sznruid() {
  clear_has_sznruid();
  if (sznruid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sznruid_;
    sznruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .BVCU.Event_Action_Email stEmail = 8;
inline bool Event_Action_Snapshot::has_stemail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event_Action_Snapshot::set_has_stemail() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event_Action_Snapshot::clear_has_stemail() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event_Action_Snapshot::clear_stemail() {
  if (stemail_ != NULL) stemail_->::BVCU::Event_Action_Email::Clear();
  clear_has_stemail();
}
inline const ::BVCU::Event_Action_Email& Event_Action_Snapshot::stemail() const {
  return stemail_ != NULL ? *stemail_ : *default_instance_->stemail_;
}
inline ::BVCU::Event_Action_Email* Event_Action_Snapshot::mutable_stemail() {
  set_has_stemail();
  if (stemail_ == NULL) stemail_ = new ::BVCU::Event_Action_Email;
  return stemail_;
}
inline ::BVCU::Event_Action_Email* Event_Action_Snapshot::release_stemail() {
  clear_has_stemail();
  ::BVCU::Event_Action_Email* temp = stemail_;
  stemail_ = NULL;
  return temp;
}

// optional uint32 bAttach = 9;
inline bool Event_Action_Snapshot::has_battach() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event_Action_Snapshot::set_has_battach() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event_Action_Snapshot::clear_has_battach() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event_Action_Snapshot::clear_battach() {
  battach_ = 0u;
  clear_has_battach();
}
inline ::google::protobuf::uint32 Event_Action_Snapshot::battach() const {
  return battach_;
}
inline void Event_Action_Snapshot::set_battach(::google::protobuf::uint32 value) {
  set_has_battach();
  battach_ = value;
}

// -------------------------------------------------------------------

// Event_Action_SMS

// optional string szID = 1;
inline bool Event_Action_SMS::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_SMS::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_SMS::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_SMS::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_SMS::szid() const {
  return *szid_;
}
inline void Event_Action_SMS::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_SMS::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_SMS::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_SMS::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_SMS::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szCardNum = 2;
inline bool Event_Action_SMS::has_szcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_SMS::set_has_szcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_SMS::clear_has_szcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_SMS::clear_szcardnum() {
  if (szcardnum_ != &::google::protobuf::internal::kEmptyString) {
    szcardnum_->clear();
  }
  clear_has_szcardnum();
}
inline const ::std::string& Event_Action_SMS::szcardnum() const {
  return *szcardnum_;
}
inline void Event_Action_SMS::set_szcardnum(const ::std::string& value) {
  set_has_szcardnum();
  if (szcardnum_ == &::google::protobuf::internal::kEmptyString) {
    szcardnum_ = new ::std::string;
  }
  szcardnum_->assign(value);
}
inline void Event_Action_SMS::set_szcardnum(const char* value) {
  set_has_szcardnum();
  if (szcardnum_ == &::google::protobuf::internal::kEmptyString) {
    szcardnum_ = new ::std::string;
  }
  szcardnum_->assign(value);
}
inline void Event_Action_SMS::set_szcardnum(const char* value, size_t size) {
  set_has_szcardnum();
  if (szcardnum_ == &::google::protobuf::internal::kEmptyString) {
    szcardnum_ = new ::std::string;
  }
  szcardnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_SMS::mutable_szcardnum() {
  set_has_szcardnum();
  if (szcardnum_ == &::google::protobuf::internal::kEmptyString) {
    szcardnum_ = new ::std::string;
  }
  return szcardnum_;
}
inline ::std::string* Event_Action_SMS::release_szcardnum() {
  clear_has_szcardnum();
  if (szcardnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szcardnum_;
    szcardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Event_Action_PTZ

// optional string szID = 1;
inline bool Event_Action_PTZ::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_PTZ::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_PTZ::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_PTZ::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_PTZ::szid() const {
  return *szid_;
}
inline void Event_Action_PTZ::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_PTZ::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_PTZ::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_PTZ::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_PTZ::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_PTZ::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_PTZ::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_PTZ::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_PTZ::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_PTZ::iindex() const {
  return iindex_;
}
inline void Event_Action_PTZ::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional uint32 iCommand = 3;
inline bool Event_Action_PTZ::has_icommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_PTZ::set_has_icommand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_PTZ::clear_has_icommand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_PTZ::clear_icommand() {
  icommand_ = 0u;
  clear_has_icommand();
}
inline ::google::protobuf::uint32 Event_Action_PTZ::icommand() const {
  return icommand_;
}
inline void Event_Action_PTZ::set_icommand(::google::protobuf::uint32 value) {
  set_has_icommand();
  icommand_ = value;
}

// optional uint32 iParam = 4;
inline bool Event_Action_PTZ::has_iparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action_PTZ::set_has_iparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action_PTZ::clear_has_iparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action_PTZ::clear_iparam() {
  iparam_ = 0u;
  clear_has_iparam();
}
inline ::google::protobuf::uint32 Event_Action_PTZ::iparam() const {
  return iparam_;
}
inline void Event_Action_PTZ::set_iparam(::google::protobuf::uint32 value) {
  set_has_iparam();
  iparam_ = value;
}

// -------------------------------------------------------------------

// Event_Action_AudioOut

// optional string szID = 1;
inline bool Event_Action_AudioOut::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_AudioOut::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_AudioOut::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_AudioOut::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_AudioOut::szid() const {
  return *szid_;
}
inline void Event_Action_AudioOut::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_AudioOut::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_AudioOut::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_AudioOut::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_AudioOut::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_AudioOut::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_AudioOut::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_AudioOut::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_AudioOut::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_AudioOut::iindex() const {
  return iindex_;
}
inline void Event_Action_AudioOut::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// -------------------------------------------------------------------

// Event_Action_ShowMsg

// optional string szID = 1;
inline bool Event_Action_ShowMsg::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_ShowMsg::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_ShowMsg::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_ShowMsg::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_ShowMsg::szid() const {
  return *szid_;
}
inline void Event_Action_ShowMsg::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_ShowMsg::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_ShowMsg::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_ShowMsg::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_ShowMsg::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szText = 2;
inline bool Event_Action_ShowMsg::has_sztext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_ShowMsg::set_has_sztext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_ShowMsg::clear_has_sztext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_ShowMsg::clear_sztext() {
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    sztext_->clear();
  }
  clear_has_sztext();
}
inline const ::std::string& Event_Action_ShowMsg::sztext() const {
  return *sztext_;
}
inline void Event_Action_ShowMsg::set_sztext(const ::std::string& value) {
  set_has_sztext();
  if (sztext_ == &::google::protobuf::internal::kEmptyString) {
    sztext_ = new ::std::string;
  }
  sztext_->assign(value);
}
inline void Event_Action_ShowMsg::set_sztext(const char* value) {
  set_has_sztext();
  if (sztext_ == &::google::protobuf::internal::kEmptyString) {
    sztext_ = new ::std::string;
  }
  sztext_->assign(value);
}
inline void Event_Action_ShowMsg::set_sztext(const char* value, size_t size) {
  set_has_sztext();
  if (sztext_ == &::google::protobuf::internal::kEmptyString) {
    sztext_ = new ::std::string;
  }
  sztext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_ShowMsg::mutable_sztext() {
  set_has_sztext();
  if (sztext_ == &::google::protobuf::internal::kEmptyString) {
    sztext_ = new ::std::string;
  }
  return sztext_;
}
inline ::std::string* Event_Action_ShowMsg::release_sztext() {
  clear_has_sztext();
  if (sztext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sztext_;
    sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 bSoundAlert = 3;
inline bool Event_Action_ShowMsg::has_bsoundalert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_ShowMsg::set_has_bsoundalert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_ShowMsg::clear_has_bsoundalert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_ShowMsg::clear_bsoundalert() {
  bsoundalert_ = 0u;
  clear_has_bsoundalert();
}
inline ::google::protobuf::uint32 Event_Action_ShowMsg::bsoundalert() const {
  return bsoundalert_;
}
inline void Event_Action_ShowMsg::set_bsoundalert(::google::protobuf::uint32 value) {
  set_has_bsoundalert();
  bsoundalert_ = value;
}

// -------------------------------------------------------------------

// Event_Action_Custom

// optional string szID = 1;
inline bool Event_Action_Custom::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action_Custom::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action_Custom::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action_Custom::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& Event_Action_Custom::szid() const {
  return *szid_;
}
inline void Event_Action_Custom::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_Custom::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void Event_Action_Custom::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Custom::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* Event_Action_Custom::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iIndex = 2;
inline bool Event_Action_Custom::has_iindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action_Custom::set_has_iindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action_Custom::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action_Custom::clear_iindex() {
  iindex_ = 0u;
  clear_has_iindex();
}
inline ::google::protobuf::uint32 Event_Action_Custom::iindex() const {
  return iindex_;
}
inline void Event_Action_Custom::set_iindex(::google::protobuf::uint32 value) {
  set_has_iindex();
  iindex_ = value;
}

// optional bytes pContentData = 3;
inline bool Event_Action_Custom::has_pcontentdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action_Custom::set_has_pcontentdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action_Custom::clear_has_pcontentdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action_Custom::clear_pcontentdata() {
  if (pcontentdata_ != &::google::protobuf::internal::kEmptyString) {
    pcontentdata_->clear();
  }
  clear_has_pcontentdata();
}
inline const ::std::string& Event_Action_Custom::pcontentdata() const {
  return *pcontentdata_;
}
inline void Event_Action_Custom::set_pcontentdata(const ::std::string& value) {
  set_has_pcontentdata();
  if (pcontentdata_ == &::google::protobuf::internal::kEmptyString) {
    pcontentdata_ = new ::std::string;
  }
  pcontentdata_->assign(value);
}
inline void Event_Action_Custom::set_pcontentdata(const char* value) {
  set_has_pcontentdata();
  if (pcontentdata_ == &::google::protobuf::internal::kEmptyString) {
    pcontentdata_ = new ::std::string;
  }
  pcontentdata_->assign(value);
}
inline void Event_Action_Custom::set_pcontentdata(const void* value, size_t size) {
  set_has_pcontentdata();
  if (pcontentdata_ == &::google::protobuf::internal::kEmptyString) {
    pcontentdata_ = new ::std::string;
  }
  pcontentdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Action_Custom::mutable_pcontentdata() {
  set_has_pcontentdata();
  if (pcontentdata_ == &::google::protobuf::internal::kEmptyString) {
    pcontentdata_ = new ::std::string;
  }
  return pcontentdata_;
}
inline ::std::string* Event_Action_Custom::release_pcontentdata() {
  clear_has_pcontentdata();
  if (pcontentdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pcontentdata_;
    pcontentdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Event_Action

// optional uint32 iAction = 1;
inline bool Event_Action::has_iaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Action::set_has_iaction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Action::clear_has_iaction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Action::clear_iaction() {
  iaction_ = 0u;
  clear_has_iaction();
}
inline ::google::protobuf::uint32 Event_Action::iaction() const {
  return iaction_;
}
inline void Event_Action::set_iaction(::google::protobuf::uint32 value) {
  set_has_iaction();
  iaction_ = value;
}

// optional uint32 iCount = 2;
inline bool Event_Action::has_icount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Action::set_has_icount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Action::clear_has_icount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Action::clear_icount() {
  icount_ = 0u;
  clear_has_icount();
}
inline ::google::protobuf::uint32 Event_Action::icount() const {
  return icount_;
}
inline void Event_Action::set_icount(::google::protobuf::uint32 value) {
  set_has_icount();
  icount_ = value;
}

// optional uint32 iDelay = 3;
inline bool Event_Action::has_idelay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Action::set_has_idelay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Action::clear_has_idelay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Action::clear_idelay() {
  idelay_ = 0u;
  clear_has_idelay();
}
inline ::google::protobuf::uint32 Event_Action::idelay() const {
  return idelay_;
}
inline void Event_Action::set_idelay(::google::protobuf::uint32 value) {
  set_has_idelay();
  idelay_ = value;
}

// optional uint32 iInterval = 4;
inline bool Event_Action::has_iinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Action::set_has_iinterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Action::clear_has_iinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_Action::clear_iinterval() {
  iinterval_ = 0u;
  clear_has_iinterval();
}
inline ::google::protobuf::uint32 Event_Action::iinterval() const {
  return iinterval_;
}
inline void Event_Action::set_iinterval(::google::protobuf::uint32 value) {
  set_has_iinterval();
  iinterval_ = value;
}

// optional .BVCU.Event_Action_PURecord puRecord = 5;
inline bool Event_Action::has_purecord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_Action::set_has_purecord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_Action::clear_has_purecord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_Action::clear_purecord() {
  if (purecord_ != NULL) purecord_->::BVCU::Event_Action_PURecord::Clear();
  clear_has_purecord();
}
inline const ::BVCU::Event_Action_PURecord& Event_Action::purecord() const {
  return purecord_ != NULL ? *purecord_ : *default_instance_->purecord_;
}
inline ::BVCU::Event_Action_PURecord* Event_Action::mutable_purecord() {
  set_has_purecord();
  if (purecord_ == NULL) purecord_ = new ::BVCU::Event_Action_PURecord;
  return purecord_;
}
inline ::BVCU::Event_Action_PURecord* Event_Action::release_purecord() {
  clear_has_purecord();
  ::BVCU::Event_Action_PURecord* temp = purecord_;
  purecord_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_AlertOut alertOut = 6;
inline bool Event_Action::has_alertout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event_Action::set_has_alertout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event_Action::clear_has_alertout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event_Action::clear_alertout() {
  if (alertout_ != NULL) alertout_->::BVCU::Event_Action_AlertOut::Clear();
  clear_has_alertout();
}
inline const ::BVCU::Event_Action_AlertOut& Event_Action::alertout() const {
  return alertout_ != NULL ? *alertout_ : *default_instance_->alertout_;
}
inline ::BVCU::Event_Action_AlertOut* Event_Action::mutable_alertout() {
  set_has_alertout();
  if (alertout_ == NULL) alertout_ = new ::BVCU::Event_Action_AlertOut;
  return alertout_;
}
inline ::BVCU::Event_Action_AlertOut* Event_Action::release_alertout() {
  clear_has_alertout();
  ::BVCU::Event_Action_AlertOut* temp = alertout_;
  alertout_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_Snapshot snapshot = 7;
inline bool Event_Action::has_snapshot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event_Action::set_has_snapshot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event_Action::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event_Action::clear_snapshot() {
  if (snapshot_ != NULL) snapshot_->::BVCU::Event_Action_Snapshot::Clear();
  clear_has_snapshot();
}
inline const ::BVCU::Event_Action_Snapshot& Event_Action::snapshot() const {
  return snapshot_ != NULL ? *snapshot_ : *default_instance_->snapshot_;
}
inline ::BVCU::Event_Action_Snapshot* Event_Action::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == NULL) snapshot_ = new ::BVCU::Event_Action_Snapshot;
  return snapshot_;
}
inline ::BVCU::Event_Action_Snapshot* Event_Action::release_snapshot() {
  clear_has_snapshot();
  ::BVCU::Event_Action_Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_PTZ ptz = 8;
inline bool Event_Action::has_ptz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event_Action::set_has_ptz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event_Action::clear_has_ptz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event_Action::clear_ptz() {
  if (ptz_ != NULL) ptz_->::BVCU::Event_Action_PTZ::Clear();
  clear_has_ptz();
}
inline const ::BVCU::Event_Action_PTZ& Event_Action::ptz() const {
  return ptz_ != NULL ? *ptz_ : *default_instance_->ptz_;
}
inline ::BVCU::Event_Action_PTZ* Event_Action::mutable_ptz() {
  set_has_ptz();
  if (ptz_ == NULL) ptz_ = new ::BVCU::Event_Action_PTZ;
  return ptz_;
}
inline ::BVCU::Event_Action_PTZ* Event_Action::release_ptz() {
  clear_has_ptz();
  ::BVCU::Event_Action_PTZ* temp = ptz_;
  ptz_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_AudioOut audioOut = 9;
inline bool Event_Action::has_audioout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event_Action::set_has_audioout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event_Action::clear_has_audioout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event_Action::clear_audioout() {
  if (audioout_ != NULL) audioout_->::BVCU::Event_Action_AudioOut::Clear();
  clear_has_audioout();
}
inline const ::BVCU::Event_Action_AudioOut& Event_Action::audioout() const {
  return audioout_ != NULL ? *audioout_ : *default_instance_->audioout_;
}
inline ::BVCU::Event_Action_AudioOut* Event_Action::mutable_audioout() {
  set_has_audioout();
  if (audioout_ == NULL) audioout_ = new ::BVCU::Event_Action_AudioOut;
  return audioout_;
}
inline ::BVCU::Event_Action_AudioOut* Event_Action::release_audioout() {
  clear_has_audioout();
  ::BVCU::Event_Action_AudioOut* temp = audioout_;
  audioout_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_SMS sms = 10;
inline bool Event_Action::has_sms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Event_Action::set_has_sms() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Event_Action::clear_has_sms() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Event_Action::clear_sms() {
  if (sms_ != NULL) sms_->::BVCU::Event_Action_SMS::Clear();
  clear_has_sms();
}
inline const ::BVCU::Event_Action_SMS& Event_Action::sms() const {
  return sms_ != NULL ? *sms_ : *default_instance_->sms_;
}
inline ::BVCU::Event_Action_SMS* Event_Action::mutable_sms() {
  set_has_sms();
  if (sms_ == NULL) sms_ = new ::BVCU::Event_Action_SMS;
  return sms_;
}
inline ::BVCU::Event_Action_SMS* Event_Action::release_sms() {
  clear_has_sms();
  ::BVCU::Event_Action_SMS* temp = sms_;
  sms_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_Email email = 11;
inline bool Event_Action::has_email() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Event_Action::set_has_email() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Event_Action::clear_has_email() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Event_Action::clear_email() {
  if (email_ != NULL) email_->::BVCU::Event_Action_Email::Clear();
  clear_has_email();
}
inline const ::BVCU::Event_Action_Email& Event_Action::email() const {
  return email_ != NULL ? *email_ : *default_instance_->email_;
}
inline ::BVCU::Event_Action_Email* Event_Action::mutable_email() {
  set_has_email();
  if (email_ == NULL) email_ = new ::BVCU::Event_Action_Email;
  return email_;
}
inline ::BVCU::Event_Action_Email* Event_Action::release_email() {
  clear_has_email();
  ::BVCU::Event_Action_Email* temp = email_;
  email_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_ShowMsg showMsg = 12;
inline bool Event_Action::has_showmsg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Event_Action::set_has_showmsg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Event_Action::clear_has_showmsg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Event_Action::clear_showmsg() {
  if (showmsg_ != NULL) showmsg_->::BVCU::Event_Action_ShowMsg::Clear();
  clear_has_showmsg();
}
inline const ::BVCU::Event_Action_ShowMsg& Event_Action::showmsg() const {
  return showmsg_ != NULL ? *showmsg_ : *default_instance_->showmsg_;
}
inline ::BVCU::Event_Action_ShowMsg* Event_Action::mutable_showmsg() {
  set_has_showmsg();
  if (showmsg_ == NULL) showmsg_ = new ::BVCU::Event_Action_ShowMsg;
  return showmsg_;
}
inline ::BVCU::Event_Action_ShowMsg* Event_Action::release_showmsg() {
  clear_has_showmsg();
  ::BVCU::Event_Action_ShowMsg* temp = showmsg_;
  showmsg_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_EventRecord eventRecord = 13;
inline bool Event_Action::has_eventrecord() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Event_Action::set_has_eventrecord() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Event_Action::clear_has_eventrecord() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Event_Action::clear_eventrecord() {
  if (eventrecord_ != NULL) eventrecord_->::BVCU::Event_Action_EventRecord::Clear();
  clear_has_eventrecord();
}
inline const ::BVCU::Event_Action_EventRecord& Event_Action::eventrecord() const {
  return eventrecord_ != NULL ? *eventrecord_ : *default_instance_->eventrecord_;
}
inline ::BVCU::Event_Action_EventRecord* Event_Action::mutable_eventrecord() {
  set_has_eventrecord();
  if (eventrecord_ == NULL) eventrecord_ = new ::BVCU::Event_Action_EventRecord;
  return eventrecord_;
}
inline ::BVCU::Event_Action_EventRecord* Event_Action::release_eventrecord() {
  clear_has_eventrecord();
  ::BVCU::Event_Action_EventRecord* temp = eventrecord_;
  eventrecord_ = NULL;
  return temp;
}

// optional .BVCU.Event_Action_Custom custom = 14;
inline bool Event_Action::has_custom() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Event_Action::set_has_custom() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Event_Action::clear_has_custom() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Event_Action::clear_custom() {
  if (custom_ != NULL) custom_->::BVCU::Event_Action_Custom::Clear();
  clear_has_custom();
}
inline const ::BVCU::Event_Action_Custom& Event_Action::custom() const {
  return custom_ != NULL ? *custom_ : *default_instance_->custom_;
}
inline ::BVCU::Event_Action_Custom* Event_Action::mutable_custom() {
  set_has_custom();
  if (custom_ == NULL) custom_ = new ::BVCU::Event_Action_Custom;
  return custom_;
}
inline ::BVCU::Event_Action_Custom* Event_Action::release_custom() {
  clear_has_custom();
  ::BVCU::Event_Action_Custom* temp = custom_;
  custom_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Event_LinkAction_Base

// optional string szName = 1;
inline bool Event_LinkAction_Base::has_szname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_LinkAction_Base::set_has_szname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_LinkAction_Base::clear_has_szname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_LinkAction_Base::clear_szname() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    szname_->clear();
  }
  clear_has_szname();
}
inline const ::std::string& Event_LinkAction_Base::szname() const {
  return *szname_;
}
inline void Event_LinkAction_Base::set_szname(const ::std::string& value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void Event_LinkAction_Base::set_szname(const char* value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void Event_LinkAction_Base::set_szname(const char* value, size_t size) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_LinkAction_Base::mutable_szname() {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  return szname_;
}
inline ::std::string* Event_LinkAction_Base::release_szname() {
  clear_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szname_;
    szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 bEnable = 2;
inline bool Event_LinkAction_Base::has_benable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_LinkAction_Base::set_has_benable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_LinkAction_Base::clear_has_benable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_LinkAction_Base::clear_benable() {
  benable_ = 0u;
  clear_has_benable();
}
inline ::google::protobuf::uint32 Event_LinkAction_Base::benable() const {
  return benable_;
}
inline void Event_LinkAction_Base::set_benable(::google::protobuf::uint32 value) {
  set_has_benable();
  benable_ = value;
}

// optional uint32 bInAction = 3;
inline bool Event_LinkAction_Base::has_binaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_LinkAction_Base::set_has_binaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_LinkAction_Base::clear_has_binaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_LinkAction_Base::clear_binaction() {
  binaction_ = 0u;
  clear_has_binaction();
}
inline ::google::protobuf::uint32 Event_LinkAction_Base::binaction() const {
  return binaction_;
}
inline void Event_LinkAction_Base::set_binaction(::google::protobuf::uint32 value) {
  set_has_binaction();
  binaction_ = value;
}

// optional .BVCU.PUConfig.WallTime stBegin = 4;
inline bool Event_LinkAction_Base::has_stbegin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_LinkAction_Base::set_has_stbegin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_LinkAction_Base::clear_has_stbegin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_LinkAction_Base::clear_stbegin() {
  if (stbegin_ != NULL) stbegin_->::BVCU::PUConfig::WallTime::Clear();
  clear_has_stbegin();
}
inline const ::BVCU::PUConfig::WallTime& Event_LinkAction_Base::stbegin() const {
  return stbegin_ != NULL ? *stbegin_ : *default_instance_->stbegin_;
}
inline ::BVCU::PUConfig::WallTime* Event_LinkAction_Base::mutable_stbegin() {
  set_has_stbegin();
  if (stbegin_ == NULL) stbegin_ = new ::BVCU::PUConfig::WallTime;
  return stbegin_;
}
inline ::BVCU::PUConfig::WallTime* Event_LinkAction_Base::release_stbegin() {
  clear_has_stbegin();
  ::BVCU::PUConfig::WallTime* temp = stbegin_;
  stbegin_ = NULL;
  return temp;
}

// optional .BVCU.PUConfig.WallTime stEnd = 5;
inline bool Event_LinkAction_Base::has_stend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_LinkAction_Base::set_has_stend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_LinkAction_Base::clear_has_stend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_LinkAction_Base::clear_stend() {
  if (stend_ != NULL) stend_->::BVCU::PUConfig::WallTime::Clear();
  clear_has_stend();
}
inline const ::BVCU::PUConfig::WallTime& Event_LinkAction_Base::stend() const {
  return stend_ != NULL ? *stend_ : *default_instance_->stend_;
}
inline ::BVCU::PUConfig::WallTime* Event_LinkAction_Base::mutable_stend() {
  set_has_stend();
  if (stend_ == NULL) stend_ = new ::BVCU::PUConfig::WallTime;
  return stend_;
}
inline ::BVCU::PUConfig::WallTime* Event_LinkAction_Base::release_stend() {
  clear_has_stend();
  ::BVCU::PUConfig::WallTime* temp = stend_;
  stend_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Event_LinkAction

// optional .BVCU.Event_LinkAction_Base stBase = 1;
inline bool Event_LinkAction::has_stbase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_LinkAction::set_has_stbase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_LinkAction::clear_has_stbase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_LinkAction::clear_stbase() {
  if (stbase_ != NULL) stbase_->::BVCU::Event_LinkAction_Base::Clear();
  clear_has_stbase();
}
inline const ::BVCU::Event_LinkAction_Base& Event_LinkAction::stbase() const {
  return stbase_ != NULL ? *stbase_ : *default_instance_->stbase_;
}
inline ::BVCU::Event_LinkAction_Base* Event_LinkAction::mutable_stbase() {
  set_has_stbase();
  if (stbase_ == NULL) stbase_ = new ::BVCU::Event_LinkAction_Base;
  return stbase_;
}
inline ::BVCU::Event_LinkAction_Base* Event_LinkAction::release_stbase() {
  clear_has_stbase();
  ::BVCU::Event_LinkAction_Base* temp = stbase_;
  stbase_ = NULL;
  return temp;
}

// optional .BVCU.PUConfig.WeekTimeSlice stWeek = 2;
inline bool Event_LinkAction::has_stweek() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_LinkAction::set_has_stweek() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_LinkAction::clear_has_stweek() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_LinkAction::clear_stweek() {
  if (stweek_ != NULL) stweek_->::BVCU::PUConfig::WeekTimeSlice::Clear();
  clear_has_stweek();
}
inline const ::BVCU::PUConfig::WeekTimeSlice& Event_LinkAction::stweek() const {
  return stweek_ != NULL ? *stweek_ : *default_instance_->stweek_;
}
inline ::BVCU::PUConfig::WeekTimeSlice* Event_LinkAction::mutable_stweek() {
  set_has_stweek();
  if (stweek_ == NULL) stweek_ = new ::BVCU::PUConfig::WeekTimeSlice;
  return stweek_;
}
inline ::BVCU::PUConfig::WeekTimeSlice* Event_LinkAction::release_stweek() {
  clear_has_stweek();
  ::BVCU::PUConfig::WeekTimeSlice* temp = stweek_;
  stweek_ = NULL;
  return temp;
}

// repeated .BVCU.Event_Source pSource = 3;
inline int Event_LinkAction::psource_size() const {
  return psource_.size();
}
inline void Event_LinkAction::clear_psource() {
  psource_.Clear();
}
inline const ::BVCU::Event_Source& Event_LinkAction::psource(int index) const {
  return psource_.Get(index);
}
inline ::BVCU::Event_Source* Event_LinkAction::mutable_psource(int index) {
  return psource_.Mutable(index);
}
inline ::BVCU::Event_Source* Event_LinkAction::add_psource() {
  return psource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >&
Event_LinkAction::psource() const {
  return psource_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >*
Event_LinkAction::mutable_psource() {
  return &psource_;
}

// optional uint32 iSourceInterval = 4;
inline bool Event_LinkAction::has_isourceinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_LinkAction::set_has_isourceinterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_LinkAction::clear_has_isourceinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_LinkAction::clear_isourceinterval() {
  isourceinterval_ = 0u;
  clear_has_isourceinterval();
}
inline ::google::protobuf::uint32 Event_LinkAction::isourceinterval() const {
  return isourceinterval_;
}
inline void Event_LinkAction::set_isourceinterval(::google::protobuf::uint32 value) {
  set_has_isourceinterval();
  isourceinterval_ = value;
}

// repeated .BVCU.Event_Action pAction = 5;
inline int Event_LinkAction::paction_size() const {
  return paction_.size();
}
inline void Event_LinkAction::clear_paction() {
  paction_.Clear();
}
inline const ::BVCU::Event_Action& Event_LinkAction::paction(int index) const {
  return paction_.Get(index);
}
inline ::BVCU::Event_Action* Event_LinkAction::mutable_paction(int index) {
  return paction_.Mutable(index);
}
inline ::BVCU::Event_Action* Event_LinkAction::add_paction() {
  return paction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >&
Event_LinkAction::paction() const {
  return paction_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >*
Event_LinkAction::mutable_paction() {
  return &paction_;
}

// -------------------------------------------------------------------

// Event_LinkAction_Notify

// repeated .BVCU.Event_Source pSource = 1;
inline int Event_LinkAction_Notify::psource_size() const {
  return psource_.size();
}
inline void Event_LinkAction_Notify::clear_psource() {
  psource_.Clear();
}
inline const ::BVCU::Event_Source& Event_LinkAction_Notify::psource(int index) const {
  return psource_.Get(index);
}
inline ::BVCU::Event_Source* Event_LinkAction_Notify::mutable_psource(int index) {
  return psource_.Mutable(index);
}
inline ::BVCU::Event_Source* Event_LinkAction_Notify::add_psource() {
  return psource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >&
Event_LinkAction_Notify::psource() const {
  return psource_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Source >*
Event_LinkAction_Notify::mutable_psource() {
  return &psource_;
}

// repeated .BVCU.Event_Action pAction = 2;
inline int Event_LinkAction_Notify::paction_size() const {
  return paction_.size();
}
inline void Event_LinkAction_Notify::clear_paction() {
  paction_.Clear();
}
inline const ::BVCU::Event_Action& Event_LinkAction_Notify::paction(int index) const {
  return paction_.Get(index);
}
inline ::BVCU::Event_Action* Event_LinkAction_Notify::mutable_paction(int index) {
  return paction_.Mutable(index);
}
inline ::BVCU::Event_Action* Event_LinkAction_Notify::add_paction() {
  return paction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >&
Event_LinkAction_Notify::paction() const {
  return paction_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::Event_Action >*
Event_LinkAction_Notify::mutable_paction() {
  return &paction_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BVCU

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BVEvent_2eproto__INCLUDED
