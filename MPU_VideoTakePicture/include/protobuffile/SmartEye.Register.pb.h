// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmartEye.Register.proto

#ifndef PROTOBUF_SmartEye_2eRegister_2eproto__INCLUDED
#define PROTOBUF_SmartEye_2eRegister_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SmartEye {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SmartEye_2eRegister_2eproto();
void protobuf_AssignDesc_SmartEye_2eRegister_2eproto();
void protobuf_ShutdownFile_SmartEye_2eRegister_2eproto();

class RegisterProto;

// ===================================================================

class RegisterProto : public ::google::protobuf::Message {
 public:
  RegisterProto();
  virtual ~RegisterProto();
  
  RegisterProto(const RegisterProto& from);
  
  inline RegisterProto& operator=(const RegisterProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterProto& default_instance();
  
  void Swap(RegisterProto* other);
  
  // implements Message ----------------------------------------------
  
  RegisterProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterProto& from);
  void MergeFrom(const RegisterProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string local_addr = 1;
  inline bool has_local_addr() const;
  inline void clear_local_addr();
  static const int kLocalAddrFieldNumber = 1;
  inline const ::std::string& local_addr() const;
  inline void set_local_addr(const ::std::string& value);
  inline void set_local_addr(const char* value);
  inline void set_local_addr(const char* value, size_t size);
  inline ::std::string* mutable_local_addr();
  inline ::std::string* release_local_addr();
  
  // optional string remote_addr = 2;
  inline bool has_remote_addr() const;
  inline void clear_remote_addr();
  static const int kRemoteAddrFieldNumber = 2;
  inline const ::std::string& remote_addr() const;
  inline void set_remote_addr(const ::std::string& value);
  inline void set_remote_addr(const char* value);
  inline void set_remote_addr(const char* value, size_t size);
  inline ::std::string* mutable_remote_addr();
  inline ::std::string* release_remote_addr();
  
  // optional string rsa_key = 3;
  inline bool has_rsa_key() const;
  inline void clear_rsa_key();
  static const int kRsaKeyFieldNumber = 3;
  inline const ::std::string& rsa_key() const;
  inline void set_rsa_key(const ::std::string& value);
  inline void set_rsa_key(const char* value);
  inline void set_rsa_key(const char* value, size_t size);
  inline ::std::string* mutable_rsa_key();
  inline ::std::string* release_rsa_key();
  
  // optional string user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // optional bytes password = 5;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 5;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string server_id = 6;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // optional string server_name = 7;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 7;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // optional string domain_name = 8;
  inline bool has_domain_name() const;
  inline void clear_domain_name();
  static const int kDomainNameFieldNumber = 8;
  inline const ::std::string& domain_name() const;
  inline void set_domain_name(const ::std::string& value);
  inline void set_domain_name(const char* value);
  inline void set_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_domain_name();
  inline ::std::string* release_domain_name();
  
  // optional bytes cryptkey = 9;
  inline bool has_cryptkey() const;
  inline void clear_cryptkey();
  static const int kCryptkeyFieldNumber = 9;
  inline const ::std::string& cryptkey() const;
  inline void set_cryptkey(const ::std::string& value);
  inline void set_cryptkey(const char* value);
  inline void set_cryptkey(const void* value, size_t size);
  inline ::std::string* mutable_cryptkey();
  inline ::std::string* release_cryptkey();
  
  // optional uint32 iApplierID = 10;
  inline bool has_iapplierid() const;
  inline void clear_iapplierid();
  static const int kIApplierIDFieldNumber = 10;
  inline ::google::protobuf::uint32 iapplierid() const;
  inline void set_iapplierid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SmartEye.RegisterProto)
 private:
  inline void set_has_local_addr();
  inline void clear_has_local_addr();
  inline void set_has_remote_addr();
  inline void clear_has_remote_addr();
  inline void set_has_rsa_key();
  inline void clear_has_rsa_key();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_domain_name();
  inline void clear_has_domain_name();
  inline void set_has_cryptkey();
  inline void clear_has_cryptkey();
  inline void set_has_iapplierid();
  inline void clear_has_iapplierid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* local_addr_;
  ::std::string* remote_addr_;
  ::std::string* rsa_key_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::std::string* server_id_;
  ::std::string* server_name_;
  ::std::string* domain_name_;
  ::std::string* cryptkey_;
  ::google::protobuf::uint32 iapplierid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eRegister_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eRegister_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eRegister_2eproto();
  
  void InitAsDefaultInstance();
  static RegisterProto* default_instance_;
};
// ===================================================================


// ===================================================================

// RegisterProto

// optional string local_addr = 1;
inline bool RegisterProto::has_local_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterProto::set_has_local_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterProto::clear_has_local_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterProto::clear_local_addr() {
  if (local_addr_ != &::google::protobuf::internal::kEmptyString) {
    local_addr_->clear();
  }
  clear_has_local_addr();
}
inline const ::std::string& RegisterProto::local_addr() const {
  return *local_addr_;
}
inline void RegisterProto::set_local_addr(const ::std::string& value) {
  set_has_local_addr();
  if (local_addr_ == &::google::protobuf::internal::kEmptyString) {
    local_addr_ = new ::std::string;
  }
  local_addr_->assign(value);
}
inline void RegisterProto::set_local_addr(const char* value) {
  set_has_local_addr();
  if (local_addr_ == &::google::protobuf::internal::kEmptyString) {
    local_addr_ = new ::std::string;
  }
  local_addr_->assign(value);
}
inline void RegisterProto::set_local_addr(const char* value, size_t size) {
  set_has_local_addr();
  if (local_addr_ == &::google::protobuf::internal::kEmptyString) {
    local_addr_ = new ::std::string;
  }
  local_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_local_addr() {
  set_has_local_addr();
  if (local_addr_ == &::google::protobuf::internal::kEmptyString) {
    local_addr_ = new ::std::string;
  }
  return local_addr_;
}
inline ::std::string* RegisterProto::release_local_addr() {
  clear_has_local_addr();
  if (local_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_addr_;
    local_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string remote_addr = 2;
inline bool RegisterProto::has_remote_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterProto::set_has_remote_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterProto::clear_has_remote_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterProto::clear_remote_addr() {
  if (remote_addr_ != &::google::protobuf::internal::kEmptyString) {
    remote_addr_->clear();
  }
  clear_has_remote_addr();
}
inline const ::std::string& RegisterProto::remote_addr() const {
  return *remote_addr_;
}
inline void RegisterProto::set_remote_addr(const ::std::string& value) {
  set_has_remote_addr();
  if (remote_addr_ == &::google::protobuf::internal::kEmptyString) {
    remote_addr_ = new ::std::string;
  }
  remote_addr_->assign(value);
}
inline void RegisterProto::set_remote_addr(const char* value) {
  set_has_remote_addr();
  if (remote_addr_ == &::google::protobuf::internal::kEmptyString) {
    remote_addr_ = new ::std::string;
  }
  remote_addr_->assign(value);
}
inline void RegisterProto::set_remote_addr(const char* value, size_t size) {
  set_has_remote_addr();
  if (remote_addr_ == &::google::protobuf::internal::kEmptyString) {
    remote_addr_ = new ::std::string;
  }
  remote_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_remote_addr() {
  set_has_remote_addr();
  if (remote_addr_ == &::google::protobuf::internal::kEmptyString) {
    remote_addr_ = new ::std::string;
  }
  return remote_addr_;
}
inline ::std::string* RegisterProto::release_remote_addr() {
  clear_has_remote_addr();
  if (remote_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remote_addr_;
    remote_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rsa_key = 3;
inline bool RegisterProto::has_rsa_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterProto::set_has_rsa_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterProto::clear_has_rsa_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterProto::clear_rsa_key() {
  if (rsa_key_ != &::google::protobuf::internal::kEmptyString) {
    rsa_key_->clear();
  }
  clear_has_rsa_key();
}
inline const ::std::string& RegisterProto::rsa_key() const {
  return *rsa_key_;
}
inline void RegisterProto::set_rsa_key(const ::std::string& value) {
  set_has_rsa_key();
  if (rsa_key_ == &::google::protobuf::internal::kEmptyString) {
    rsa_key_ = new ::std::string;
  }
  rsa_key_->assign(value);
}
inline void RegisterProto::set_rsa_key(const char* value) {
  set_has_rsa_key();
  if (rsa_key_ == &::google::protobuf::internal::kEmptyString) {
    rsa_key_ = new ::std::string;
  }
  rsa_key_->assign(value);
}
inline void RegisterProto::set_rsa_key(const char* value, size_t size) {
  set_has_rsa_key();
  if (rsa_key_ == &::google::protobuf::internal::kEmptyString) {
    rsa_key_ = new ::std::string;
  }
  rsa_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_rsa_key() {
  set_has_rsa_key();
  if (rsa_key_ == &::google::protobuf::internal::kEmptyString) {
    rsa_key_ = new ::std::string;
  }
  return rsa_key_;
}
inline ::std::string* RegisterProto::release_rsa_key() {
  clear_has_rsa_key();
  if (rsa_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rsa_key_;
    rsa_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 4;
inline bool RegisterProto::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterProto::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterProto::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterProto::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegisterProto::user_name() const {
  return *user_name_;
}
inline void RegisterProto::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegisterProto::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegisterProto::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegisterProto::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes password = 5;
inline bool RegisterProto::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterProto::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterProto::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterProto::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RegisterProto::password() const {
  return *password_;
}
inline void RegisterProto::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegisterProto::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegisterProto::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RegisterProto::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_id = 6;
inline bool RegisterProto::has_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterProto::set_has_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterProto::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterProto::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& RegisterProto::server_id() const {
  return *server_id_;
}
inline void RegisterProto::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void RegisterProto::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void RegisterProto::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* RegisterProto::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_name = 7;
inline bool RegisterProto::has_server_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterProto::set_has_server_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterProto::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterProto::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& RegisterProto::server_name() const {
  return *server_name_;
}
inline void RegisterProto::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void RegisterProto::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void RegisterProto::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* RegisterProto::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string domain_name = 8;
inline bool RegisterProto::has_domain_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegisterProto::set_has_domain_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegisterProto::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegisterProto::clear_domain_name() {
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    domain_name_->clear();
  }
  clear_has_domain_name();
}
inline const ::std::string& RegisterProto::domain_name() const {
  return *domain_name_;
}
inline void RegisterProto::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void RegisterProto::set_domain_name(const char* value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void RegisterProto::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_domain_name() {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  return domain_name_;
}
inline ::std::string* RegisterProto::release_domain_name() {
  clear_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_name_;
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes cryptkey = 9;
inline bool RegisterProto::has_cryptkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegisterProto::set_has_cryptkey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegisterProto::clear_has_cryptkey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegisterProto::clear_cryptkey() {
  if (cryptkey_ != &::google::protobuf::internal::kEmptyString) {
    cryptkey_->clear();
  }
  clear_has_cryptkey();
}
inline const ::std::string& RegisterProto::cryptkey() const {
  return *cryptkey_;
}
inline void RegisterProto::set_cryptkey(const ::std::string& value) {
  set_has_cryptkey();
  if (cryptkey_ == &::google::protobuf::internal::kEmptyString) {
    cryptkey_ = new ::std::string;
  }
  cryptkey_->assign(value);
}
inline void RegisterProto::set_cryptkey(const char* value) {
  set_has_cryptkey();
  if (cryptkey_ == &::google::protobuf::internal::kEmptyString) {
    cryptkey_ = new ::std::string;
  }
  cryptkey_->assign(value);
}
inline void RegisterProto::set_cryptkey(const void* value, size_t size) {
  set_has_cryptkey();
  if (cryptkey_ == &::google::protobuf::internal::kEmptyString) {
    cryptkey_ = new ::std::string;
  }
  cryptkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterProto::mutable_cryptkey() {
  set_has_cryptkey();
  if (cryptkey_ == &::google::protobuf::internal::kEmptyString) {
    cryptkey_ = new ::std::string;
  }
  return cryptkey_;
}
inline ::std::string* RegisterProto::release_cryptkey() {
  clear_has_cryptkey();
  if (cryptkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cryptkey_;
    cryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iApplierID = 10;
inline bool RegisterProto::has_iapplierid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegisterProto::set_has_iapplierid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegisterProto::clear_has_iapplierid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegisterProto::clear_iapplierid() {
  iapplierid_ = 0u;
  clear_has_iapplierid();
}
inline ::google::protobuf::uint32 RegisterProto::iapplierid() const {
  return iapplierid_;
}
inline void RegisterProto::set_iapplierid(::google::protobuf::uint32 value) {
  set_has_iapplierid();
  iapplierid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartEye

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SmartEye_2eRegister_2eproto__INCLUDED
