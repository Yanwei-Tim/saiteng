// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BVCUConfig.proto

#ifndef PROTOBUF_BVCUConfig_2eproto__INCLUDED
#define PROTOBUF_BVCUConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace BVCU {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BVCUConfig_2eproto();
void protobuf_AssignDesc_BVCUConfig_2eproto();
void protobuf_ShutdownFile_BVCUConfig_2eproto();

class ConfBaseInfo;
class ConfParticipatorInfo;
class ConfParticipators;
class ConfParticipatorAddResult;
class ConfInfo;
class ConfParticipatorJoin;
class FTP_SESSION_OPEN;
class FTP_SESSION_OPEN_Stage1;
class FTP_SESSION_OPEN_Stage2;

// ===================================================================

class ConfBaseInfo : public ::google::protobuf::Message {
 public:
  ConfBaseInfo();
  virtual ~ConfBaseInfo();
  
  ConfBaseInfo(const ConfBaseInfo& from);
  
  inline ConfBaseInfo& operator=(const ConfBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfBaseInfo& default_instance();
  
  void Swap(ConfBaseInfo* other);
  
  // implements Message ----------------------------------------------
  
  ConfBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfBaseInfo& from);
  void MergeFrom(const ConfBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szName = 1;
  inline bool has_szname() const;
  inline void clear_szname();
  static const int kSzNameFieldNumber = 1;
  inline const ::std::string& szname() const;
  inline void set_szname(const ::std::string& value);
  inline void set_szname(const char* value);
  inline void set_szname(const char* value, size_t size);
  inline ::std::string* mutable_szname();
  inline ::std::string* release_szname();
  
  // optional string szID = 2;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 2;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional uint32 iMode = 3;
  inline bool has_imode() const;
  inline void clear_imode();
  static const int kIModeFieldNumber = 3;
  inline ::google::protobuf::uint32 imode() const;
  inline void set_imode(::google::protobuf::uint32 value);
  
  // optional uint32 iConfStatus = 4;
  inline bool has_iconfstatus() const;
  inline void clear_iconfstatus();
  static const int kIConfStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 iconfstatus() const;
  inline void set_iconfstatus(::google::protobuf::uint32 value);
  
  // optional bytes szPassword = 5;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPasswordFieldNumber = 5;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const void* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfBaseInfo)
 private:
  inline void set_has_szname();
  inline void clear_has_szname();
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_imode();
  inline void clear_has_imode();
  inline void set_has_iconfstatus();
  inline void clear_has_iconfstatus();
  inline void set_has_szpassword();
  inline void clear_has_szpassword();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szname_;
  ::std::string* szid_;
  ::google::protobuf::uint32 imode_;
  ::google::protobuf::uint32 iconfstatus_;
  ::std::string* szpassword_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfParticipatorInfo : public ::google::protobuf::Message {
 public:
  ConfParticipatorInfo();
  virtual ~ConfParticipatorInfo();
  
  ConfParticipatorInfo(const ConfParticipatorInfo& from);
  
  inline ConfParticipatorInfo& operator=(const ConfParticipatorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfParticipatorInfo& default_instance();
  
  void Swap(ConfParticipatorInfo* other);
  
  // implements Message ----------------------------------------------
  
  ConfParticipatorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfParticipatorInfo& from);
  void MergeFrom(const ConfParticipatorInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string szID = 1;
  inline bool has_szid() const;
  inline void clear_szid();
  static const int kSzIDFieldNumber = 1;
  inline const ::std::string& szid() const;
  inline void set_szid(const ::std::string& value);
  inline void set_szid(const char* value);
  inline void set_szid(const char* value, size_t size);
  inline ::std::string* mutable_szid();
  inline ::std::string* release_szid();
  
  // optional string szUserName = 2;
  inline bool has_szusername() const;
  inline void clear_szusername();
  static const int kSzUserNameFieldNumber = 2;
  inline const ::std::string& szusername() const;
  inline void set_szusername(const ::std::string& value);
  inline void set_szusername(const char* value);
  inline void set_szusername(const char* value, size_t size);
  inline ::std::string* mutable_szusername();
  inline ::std::string* release_szusername();
  
  // optional string szAddr = 3;
  inline bool has_szaddr() const;
  inline void clear_szaddr();
  static const int kSzAddrFieldNumber = 3;
  inline const ::std::string& szaddr() const;
  inline void set_szaddr(const ::std::string& value);
  inline void set_szaddr(const char* value);
  inline void set_szaddr(const char* value, size_t size);
  inline ::std::string* mutable_szaddr();
  inline ::std::string* release_szaddr();
  
  // optional string szAliasName = 4;
  inline bool has_szaliasname() const;
  inline void clear_szaliasname();
  static const int kSzAliasNameFieldNumber = 4;
  inline const ::std::string& szaliasname() const;
  inline void set_szaliasname(const ::std::string& value);
  inline void set_szaliasname(const char* value);
  inline void set_szaliasname(const char* value, size_t size);
  inline ::std::string* mutable_szaliasname();
  inline ::std::string* release_szaliasname();
  
  // optional uint32 iApplierID = 10;
  inline bool has_iapplierid() const;
  inline void clear_iapplierid();
  static const int kIApplierIDFieldNumber = 10;
  inline ::google::protobuf::uint32 iapplierid() const;
  inline void set_iapplierid(::google::protobuf::uint32 value);
  
  // optional uint32 iPID = 9;
  inline bool has_ipid() const;
  inline void clear_ipid();
  static const int kIPIDFieldNumber = 9;
  inline ::google::protobuf::uint32 ipid() const;
  inline void set_ipid(::google::protobuf::uint32 value);
  
  // optional uint32 iAllowedMediaDir = 5;
  inline bool has_iallowedmediadir() const;
  inline void clear_iallowedmediadir();
  static const int kIAllowedMediaDirFieldNumber = 5;
  inline ::google::protobuf::uint32 iallowedmediadir() const;
  inline void set_iallowedmediadir(::google::protobuf::uint32 value);
  
  // optional uint32 iStatus = 6;
  inline bool has_istatus() const;
  inline void clear_istatus();
  static const int kIStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 istatus() const;
  inline void set_istatus(::google::protobuf::uint32 value);
  
  // optional uint32 iPower = 7;
  inline bool has_ipower() const;
  inline void clear_ipower();
  static const int kIPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 ipower() const;
  inline void set_ipower(::google::protobuf::uint32 value);
  
  // optional uint32 iVolume = 8 [default = 128];
  inline bool has_ivolume() const;
  inline void clear_ivolume();
  static const int kIVolumeFieldNumber = 8;
  inline ::google::protobuf::uint32 ivolume() const;
  inline void set_ivolume(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfParticipatorInfo)
 private:
  inline void set_has_szid();
  inline void clear_has_szid();
  inline void set_has_szusername();
  inline void clear_has_szusername();
  inline void set_has_szaddr();
  inline void clear_has_szaddr();
  inline void set_has_szaliasname();
  inline void clear_has_szaliasname();
  inline void set_has_iapplierid();
  inline void clear_has_iapplierid();
  inline void set_has_ipid();
  inline void clear_has_ipid();
  inline void set_has_iallowedmediadir();
  inline void clear_has_iallowedmediadir();
  inline void set_has_istatus();
  inline void clear_has_istatus();
  inline void set_has_ipower();
  inline void clear_has_ipower();
  inline void set_has_ivolume();
  inline void clear_has_ivolume();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szid_;
  ::std::string* szusername_;
  ::std::string* szaddr_;
  ::std::string* szaliasname_;
  ::google::protobuf::uint32 iapplierid_;
  ::google::protobuf::uint32 ipid_;
  ::google::protobuf::uint32 iallowedmediadir_;
  ::google::protobuf::uint32 istatus_;
  ::google::protobuf::uint32 ipower_;
  ::google::protobuf::uint32 ivolume_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfParticipatorInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfParticipators : public ::google::protobuf::Message {
 public:
  ConfParticipators();
  virtual ~ConfParticipators();
  
  ConfParticipators(const ConfParticipators& from);
  
  inline ConfParticipators& operator=(const ConfParticipators& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfParticipators& default_instance();
  
  void Swap(ConfParticipators* other);
  
  // implements Message ----------------------------------------------
  
  ConfParticipators* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfParticipators& from);
  void MergeFrom(const ConfParticipators& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .BVCU.ConfParticipatorInfo confPorts = 1;
  inline int confports_size() const;
  inline void clear_confports();
  static const int kConfPortsFieldNumber = 1;
  inline const ::BVCU::ConfParticipatorInfo& confports(int index) const;
  inline ::BVCU::ConfParticipatorInfo* mutable_confports(int index);
  inline ::BVCU::ConfParticipatorInfo* add_confports();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >&
      confports() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >*
      mutable_confports();
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfParticipators)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo > confports_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfParticipators* default_instance_;
};
// -------------------------------------------------------------------

class ConfParticipatorAddResult : public ::google::protobuf::Message {
 public:
  ConfParticipatorAddResult();
  virtual ~ConfParticipatorAddResult();
  
  ConfParticipatorAddResult(const ConfParticipatorAddResult& from);
  
  inline ConfParticipatorAddResult& operator=(const ConfParticipatorAddResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfParticipatorAddResult& default_instance();
  
  void Swap(ConfParticipatorAddResult* other);
  
  // implements Message ----------------------------------------------
  
  ConfParticipatorAddResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfParticipatorAddResult& from);
  void MergeFrom(const ConfParticipatorAddResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 iResultBits = 1;
  inline int iresultbits_size() const;
  inline void clear_iresultbits();
  static const int kIResultBitsFieldNumber = 1;
  inline ::google::protobuf::uint32 iresultbits(int index) const;
  inline void set_iresultbits(int index, ::google::protobuf::uint32 value);
  inline void add_iresultbits(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      iresultbits() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_iresultbits();
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfParticipatorAddResult)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > iresultbits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfParticipatorAddResult* default_instance_;
};
// -------------------------------------------------------------------

class ConfInfo : public ::google::protobuf::Message {
 public:
  ConfInfo();
  virtual ~ConfInfo();
  
  ConfInfo(const ConfInfo& from);
  
  inline ConfInfo& operator=(const ConfInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfInfo& default_instance();
  
  void Swap(ConfInfo* other);
  
  // implements Message ----------------------------------------------
  
  ConfInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfInfo& from);
  void MergeFrom(const ConfInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BVCU.ConfBaseInfo baseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::BVCU::ConfBaseInfo& baseinfo() const;
  inline ::BVCU::ConfBaseInfo* mutable_baseinfo();
  inline ::BVCU::ConfBaseInfo* release_baseinfo();
  
  // repeated .BVCU.ConfParticipatorInfo pParticipators = 2;
  inline int pparticipators_size() const;
  inline void clear_pparticipators();
  static const int kPParticipatorsFieldNumber = 2;
  inline const ::BVCU::ConfParticipatorInfo& pparticipators(int index) const;
  inline ::BVCU::ConfParticipatorInfo* mutable_pparticipators(int index);
  inline ::BVCU::ConfParticipatorInfo* add_pparticipators();
  inline const ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >&
      pparticipators() const;
  inline ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >*
      mutable_pparticipators();
  
  // optional uint32 pCreator = 3;
  inline bool has_pcreator() const;
  inline void clear_pcreator();
  static const int kPCreatorFieldNumber = 3;
  inline ::google::protobuf::uint32 pcreator() const;
  inline void set_pcreator(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfInfo)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_pcreator();
  inline void clear_has_pcreator();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BVCU::ConfBaseInfo* baseinfo_;
  ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo > pparticipators_;
  ::google::protobuf::uint32 pcreator_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfParticipatorJoin : public ::google::protobuf::Message {
 public:
  ConfParticipatorJoin();
  virtual ~ConfParticipatorJoin();
  
  ConfParticipatorJoin(const ConfParticipatorJoin& from);
  
  inline ConfParticipatorJoin& operator=(const ConfParticipatorJoin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfParticipatorJoin& default_instance();
  
  void Swap(ConfParticipatorJoin* other);
  
  // implements Message ----------------------------------------------
  
  ConfParticipatorJoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfParticipatorJoin& from);
  void MergeFrom(const ConfParticipatorJoin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes szPassword = 1;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPasswordFieldNumber = 1;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const void* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  
  // optional string szAliasName = 2;
  inline bool has_szaliasname() const;
  inline void clear_szaliasname();
  static const int kSzAliasNameFieldNumber = 2;
  inline const ::std::string& szaliasname() const;
  inline void set_szaliasname(const ::std::string& value);
  inline void set_szaliasname(const char* value);
  inline void set_szaliasname(const char* value, size_t size);
  inline ::std::string* mutable_szaliasname();
  inline ::std::string* release_szaliasname();
  
  // @@protoc_insertion_point(class_scope:BVCU.ConfParticipatorJoin)
 private:
  inline void set_has_szpassword();
  inline void clear_has_szpassword();
  inline void set_has_szaliasname();
  inline void clear_has_szaliasname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* szpassword_;
  ::std::string* szaliasname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ConfParticipatorJoin* default_instance_;
};
// -------------------------------------------------------------------

class FTP_SESSION_OPEN : public ::google::protobuf::Message {
 public:
  FTP_SESSION_OPEN();
  virtual ~FTP_SESSION_OPEN();
  
  FTP_SESSION_OPEN(const FTP_SESSION_OPEN& from);
  
  inline FTP_SESSION_OPEN& operator=(const FTP_SESSION_OPEN& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FTP_SESSION_OPEN& default_instance();
  
  void Swap(FTP_SESSION_OPEN* other);
  
  // implements Message ----------------------------------------------
  
  FTP_SESSION_OPEN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FTP_SESSION_OPEN& from);
  void MergeFrom(const FTP_SESSION_OPEN& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 iVersion = 1;
  inline bool has_iversion() const;
  inline void clear_iversion();
  static const int kIVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 iversion() const;
  inline void set_iversion(::google::protobuf::uint32 value);
  
  // optional int64 iRandomClient = 2;
  inline bool has_irandomclient() const;
  inline void clear_irandomclient();
  static const int kIRandomClientFieldNumber = 2;
  inline ::google::protobuf::int64 irandomclient() const;
  inline void set_irandomclient(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.FTP_SESSION_OPEN)
 private:
  inline void set_has_iversion();
  inline void clear_has_iversion();
  inline void set_has_irandomclient();
  inline void clear_has_irandomclient();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 irandomclient_;
  ::google::protobuf::uint32 iversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static FTP_SESSION_OPEN* default_instance_;
};
// -------------------------------------------------------------------

class FTP_SESSION_OPEN_Stage1 : public ::google::protobuf::Message {
 public:
  FTP_SESSION_OPEN_Stage1();
  virtual ~FTP_SESSION_OPEN_Stage1();
  
  FTP_SESSION_OPEN_Stage1(const FTP_SESSION_OPEN_Stage1& from);
  
  inline FTP_SESSION_OPEN_Stage1& operator=(const FTP_SESSION_OPEN_Stage1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FTP_SESSION_OPEN_Stage1& default_instance();
  
  void Swap(FTP_SESSION_OPEN_Stage1* other);
  
  // implements Message ----------------------------------------------
  
  FTP_SESSION_OPEN_Stage1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FTP_SESSION_OPEN_Stage1& from);
  void MergeFrom(const FTP_SESSION_OPEN_Stage1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 iVersion = 1;
  inline bool has_iversion() const;
  inline void clear_iversion();
  static const int kIVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 iversion() const;
  inline void set_iversion(::google::protobuf::uint32 value);
  
  // optional uint32 iFTPSessionID = 2;
  inline bool has_iftpsessionid() const;
  inline void clear_iftpsessionid();
  static const int kIFTPSessionIDFieldNumber = 2;
  inline ::google::protobuf::uint32 iftpsessionid() const;
  inline void set_iftpsessionid(::google::protobuf::uint32 value);
  
  // optional int64 iKeyLow = 3;
  inline bool has_ikeylow() const;
  inline void clear_ikeylow();
  static const int kIKeyLowFieldNumber = 3;
  inline ::google::protobuf::int64 ikeylow() const;
  inline void set_ikeylow(::google::protobuf::int64 value);
  
  // optional int64 iKeyHigh = 4;
  inline bool has_ikeyhigh() const;
  inline void clear_ikeyhigh();
  static const int kIKeyHighFieldNumber = 4;
  inline ::google::protobuf::int64 ikeyhigh() const;
  inline void set_ikeyhigh(::google::protobuf::int64 value);
  
  // optional uint32 iCmdPort = 5;
  inline bool has_icmdport() const;
  inline void clear_icmdport();
  static const int kICmdPortFieldNumber = 5;
  inline ::google::protobuf::uint32 icmdport() const;
  inline void set_icmdport(::google::protobuf::uint32 value);
  
  // optional uint32 iDataPort = 6;
  inline bool has_idataport() const;
  inline void clear_idataport();
  static const int kIDataPortFieldNumber = 6;
  inline ::google::protobuf::uint32 idataport() const;
  inline void set_idataport(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BVCU.FTP_SESSION_OPEN_Stage1)
 private:
  inline void set_has_iversion();
  inline void clear_has_iversion();
  inline void set_has_iftpsessionid();
  inline void clear_has_iftpsessionid();
  inline void set_has_ikeylow();
  inline void clear_has_ikeylow();
  inline void set_has_ikeyhigh();
  inline void clear_has_ikeyhigh();
  inline void set_has_icmdport();
  inline void clear_has_icmdport();
  inline void set_has_idataport();
  inline void clear_has_idataport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 iversion_;
  ::google::protobuf::uint32 iftpsessionid_;
  ::google::protobuf::int64 ikeylow_;
  ::google::protobuf::int64 ikeyhigh_;
  ::google::protobuf::uint32 icmdport_;
  ::google::protobuf::uint32 idataport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static FTP_SESSION_OPEN_Stage1* default_instance_;
};
// -------------------------------------------------------------------

class FTP_SESSION_OPEN_Stage2 : public ::google::protobuf::Message {
 public:
  FTP_SESSION_OPEN_Stage2();
  virtual ~FTP_SESSION_OPEN_Stage2();
  
  FTP_SESSION_OPEN_Stage2(const FTP_SESSION_OPEN_Stage2& from);
  
  inline FTP_SESSION_OPEN_Stage2& operator=(const FTP_SESSION_OPEN_Stage2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FTP_SESSION_OPEN_Stage2& default_instance();
  
  void Swap(FTP_SESSION_OPEN_Stage2* other);
  
  // implements Message ----------------------------------------------
  
  FTP_SESSION_OPEN_Stage2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FTP_SESSION_OPEN_Stage2& from);
  void MergeFrom(const FTP_SESSION_OPEN_Stage2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 iVersion = 1;
  inline bool has_iversion() const;
  inline void clear_iversion();
  static const int kIVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 iversion() const;
  inline void set_iversion(::google::protobuf::uint32 value);
  
  // optional uint32 iFTPSessionID = 2;
  inline bool has_iftpsessionid() const;
  inline void clear_iftpsessionid();
  static const int kIFTPSessionIDFieldNumber = 2;
  inline ::google::protobuf::uint32 iftpsessionid() const;
  inline void set_iftpsessionid(::google::protobuf::uint32 value);
  
  // optional int64 iKeyLow = 3;
  inline bool has_ikeylow() const;
  inline void clear_ikeylow();
  static const int kIKeyLowFieldNumber = 3;
  inline ::google::protobuf::int64 ikeylow() const;
  inline void set_ikeylow(::google::protobuf::int64 value);
  
  // optional int64 iKeyHigh = 4;
  inline bool has_ikeyhigh() const;
  inline void clear_ikeyhigh();
  static const int kIKeyHighFieldNumber = 4;
  inline ::google::protobuf::int64 ikeyhigh() const;
  inline void set_ikeyhigh(::google::protobuf::int64 value);
  
  // optional uint32 iCmdPort = 5;
  inline bool has_icmdport() const;
  inline void clear_icmdport();
  static const int kICmdPortFieldNumber = 5;
  inline ::google::protobuf::uint32 icmdport() const;
  inline void set_icmdport(::google::protobuf::uint32 value);
  
  // optional uint32 iDataPort = 6;
  inline bool has_idataport() const;
  inline void clear_idataport();
  static const int kIDataPortFieldNumber = 6;
  inline ::google::protobuf::uint32 idataport() const;
  inline void set_idataport(::google::protobuf::uint32 value);
  
  // optional string szAddr = 7;
  inline bool has_szaddr() const;
  inline void clear_szaddr();
  static const int kSzAddrFieldNumber = 7;
  inline const ::std::string& szaddr() const;
  inline void set_szaddr(const ::std::string& value);
  inline void set_szaddr(const char* value);
  inline void set_szaddr(const char* value, size_t size);
  inline ::std::string* mutable_szaddr();
  inline ::std::string* release_szaddr();
  
  // @@protoc_insertion_point(class_scope:BVCU.FTP_SESSION_OPEN_Stage2)
 private:
  inline void set_has_iversion();
  inline void clear_has_iversion();
  inline void set_has_iftpsessionid();
  inline void clear_has_iftpsessionid();
  inline void set_has_ikeylow();
  inline void clear_has_ikeylow();
  inline void set_has_ikeyhigh();
  inline void clear_has_ikeyhigh();
  inline void set_has_icmdport();
  inline void clear_has_icmdport();
  inline void set_has_idataport();
  inline void clear_has_idataport();
  inline void set_has_szaddr();
  inline void clear_has_szaddr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 iversion_;
  ::google::protobuf::uint32 iftpsessionid_;
  ::google::protobuf::int64 ikeylow_;
  ::google::protobuf::int64 ikeyhigh_;
  ::google::protobuf::uint32 icmdport_;
  ::google::protobuf::uint32 idataport_;
  ::std::string* szaddr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_BVCUConfig_2eproto();
  friend void protobuf_AssignDesc_BVCUConfig_2eproto();
  friend void protobuf_ShutdownFile_BVCUConfig_2eproto();
  
  void InitAsDefaultInstance();
  static FTP_SESSION_OPEN_Stage2* default_instance_;
};
// ===================================================================


// ===================================================================

// ConfBaseInfo

// optional string szName = 1;
inline bool ConfBaseInfo::has_szname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfBaseInfo::set_has_szname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfBaseInfo::clear_has_szname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfBaseInfo::clear_szname() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    szname_->clear();
  }
  clear_has_szname();
}
inline const ::std::string& ConfBaseInfo::szname() const {
  return *szname_;
}
inline void ConfBaseInfo::set_szname(const ::std::string& value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void ConfBaseInfo::set_szname(const char* value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void ConfBaseInfo::set_szname(const char* value, size_t size) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfBaseInfo::mutable_szname() {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  return szname_;
}
inline ::std::string* ConfBaseInfo::release_szname() {
  clear_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szname_;
    szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szID = 2;
inline bool ConfBaseInfo::has_szid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfBaseInfo::set_has_szid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfBaseInfo::clear_has_szid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfBaseInfo::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& ConfBaseInfo::szid() const {
  return *szid_;
}
inline void ConfBaseInfo::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void ConfBaseInfo::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void ConfBaseInfo::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfBaseInfo::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* ConfBaseInfo::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iMode = 3;
inline bool ConfBaseInfo::has_imode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfBaseInfo::set_has_imode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfBaseInfo::clear_has_imode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfBaseInfo::clear_imode() {
  imode_ = 0u;
  clear_has_imode();
}
inline ::google::protobuf::uint32 ConfBaseInfo::imode() const {
  return imode_;
}
inline void ConfBaseInfo::set_imode(::google::protobuf::uint32 value) {
  set_has_imode();
  imode_ = value;
}

// optional uint32 iConfStatus = 4;
inline bool ConfBaseInfo::has_iconfstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfBaseInfo::set_has_iconfstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfBaseInfo::clear_has_iconfstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfBaseInfo::clear_iconfstatus() {
  iconfstatus_ = 0u;
  clear_has_iconfstatus();
}
inline ::google::protobuf::uint32 ConfBaseInfo::iconfstatus() const {
  return iconfstatus_;
}
inline void ConfBaseInfo::set_iconfstatus(::google::protobuf::uint32 value) {
  set_has_iconfstatus();
  iconfstatus_ = value;
}

// optional bytes szPassword = 5;
inline bool ConfBaseInfo::has_szpassword() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfBaseInfo::set_has_szpassword() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfBaseInfo::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfBaseInfo::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& ConfBaseInfo::szpassword() const {
  return *szpassword_;
}
inline void ConfBaseInfo::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void ConfBaseInfo::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void ConfBaseInfo::set_szpassword(const void* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfBaseInfo::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* ConfBaseInfo::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ConfParticipatorInfo

// optional string szID = 1;
inline bool ConfParticipatorInfo::has_szid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfParticipatorInfo::set_has_szid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfParticipatorInfo::clear_has_szid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfParticipatorInfo::clear_szid() {
  if (szid_ != &::google::protobuf::internal::kEmptyString) {
    szid_->clear();
  }
  clear_has_szid();
}
inline const ::std::string& ConfParticipatorInfo::szid() const {
  return *szid_;
}
inline void ConfParticipatorInfo::set_szid(const ::std::string& value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void ConfParticipatorInfo::set_szid(const char* value) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(value);
}
inline void ConfParticipatorInfo::set_szid(const char* value, size_t size) {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  szid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorInfo::mutable_szid() {
  set_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    szid_ = new ::std::string;
  }
  return szid_;
}
inline ::std::string* ConfParticipatorInfo::release_szid() {
  clear_has_szid();
  if (szid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szid_;
    szid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szUserName = 2;
inline bool ConfParticipatorInfo::has_szusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfParticipatorInfo::set_has_szusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfParticipatorInfo::clear_has_szusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfParticipatorInfo::clear_szusername() {
  if (szusername_ != &::google::protobuf::internal::kEmptyString) {
    szusername_->clear();
  }
  clear_has_szusername();
}
inline const ::std::string& ConfParticipatorInfo::szusername() const {
  return *szusername_;
}
inline void ConfParticipatorInfo::set_szusername(const ::std::string& value) {
  set_has_szusername();
  if (szusername_ == &::google::protobuf::internal::kEmptyString) {
    szusername_ = new ::std::string;
  }
  szusername_->assign(value);
}
inline void ConfParticipatorInfo::set_szusername(const char* value) {
  set_has_szusername();
  if (szusername_ == &::google::protobuf::internal::kEmptyString) {
    szusername_ = new ::std::string;
  }
  szusername_->assign(value);
}
inline void ConfParticipatorInfo::set_szusername(const char* value, size_t size) {
  set_has_szusername();
  if (szusername_ == &::google::protobuf::internal::kEmptyString) {
    szusername_ = new ::std::string;
  }
  szusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorInfo::mutable_szusername() {
  set_has_szusername();
  if (szusername_ == &::google::protobuf::internal::kEmptyString) {
    szusername_ = new ::std::string;
  }
  return szusername_;
}
inline ::std::string* ConfParticipatorInfo::release_szusername() {
  clear_has_szusername();
  if (szusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szusername_;
    szusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szAddr = 3;
inline bool ConfParticipatorInfo::has_szaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfParticipatorInfo::set_has_szaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfParticipatorInfo::clear_has_szaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfParticipatorInfo::clear_szaddr() {
  if (szaddr_ != &::google::protobuf::internal::kEmptyString) {
    szaddr_->clear();
  }
  clear_has_szaddr();
}
inline const ::std::string& ConfParticipatorInfo::szaddr() const {
  return *szaddr_;
}
inline void ConfParticipatorInfo::set_szaddr(const ::std::string& value) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(value);
}
inline void ConfParticipatorInfo::set_szaddr(const char* value) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(value);
}
inline void ConfParticipatorInfo::set_szaddr(const char* value, size_t size) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorInfo::mutable_szaddr() {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  return szaddr_;
}
inline ::std::string* ConfParticipatorInfo::release_szaddr() {
  clear_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szaddr_;
    szaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szAliasName = 4;
inline bool ConfParticipatorInfo::has_szaliasname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfParticipatorInfo::set_has_szaliasname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfParticipatorInfo::clear_has_szaliasname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfParticipatorInfo::clear_szaliasname() {
  if (szaliasname_ != &::google::protobuf::internal::kEmptyString) {
    szaliasname_->clear();
  }
  clear_has_szaliasname();
}
inline const ::std::string& ConfParticipatorInfo::szaliasname() const {
  return *szaliasname_;
}
inline void ConfParticipatorInfo::set_szaliasname(const ::std::string& value) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(value);
}
inline void ConfParticipatorInfo::set_szaliasname(const char* value) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(value);
}
inline void ConfParticipatorInfo::set_szaliasname(const char* value, size_t size) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorInfo::mutable_szaliasname() {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  return szaliasname_;
}
inline ::std::string* ConfParticipatorInfo::release_szaliasname() {
  clear_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szaliasname_;
    szaliasname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iApplierID = 10;
inline bool ConfParticipatorInfo::has_iapplierid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfParticipatorInfo::set_has_iapplierid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfParticipatorInfo::clear_has_iapplierid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfParticipatorInfo::clear_iapplierid() {
  iapplierid_ = 0u;
  clear_has_iapplierid();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::iapplierid() const {
  return iapplierid_;
}
inline void ConfParticipatorInfo::set_iapplierid(::google::protobuf::uint32 value) {
  set_has_iapplierid();
  iapplierid_ = value;
}

// optional uint32 iPID = 9;
inline bool ConfParticipatorInfo::has_ipid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfParticipatorInfo::set_has_ipid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfParticipatorInfo::clear_has_ipid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfParticipatorInfo::clear_ipid() {
  ipid_ = 0u;
  clear_has_ipid();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::ipid() const {
  return ipid_;
}
inline void ConfParticipatorInfo::set_ipid(::google::protobuf::uint32 value) {
  set_has_ipid();
  ipid_ = value;
}

// optional uint32 iAllowedMediaDir = 5;
inline bool ConfParticipatorInfo::has_iallowedmediadir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfParticipatorInfo::set_has_iallowedmediadir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfParticipatorInfo::clear_has_iallowedmediadir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfParticipatorInfo::clear_iallowedmediadir() {
  iallowedmediadir_ = 0u;
  clear_has_iallowedmediadir();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::iallowedmediadir() const {
  return iallowedmediadir_;
}
inline void ConfParticipatorInfo::set_iallowedmediadir(::google::protobuf::uint32 value) {
  set_has_iallowedmediadir();
  iallowedmediadir_ = value;
}

// optional uint32 iStatus = 6;
inline bool ConfParticipatorInfo::has_istatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfParticipatorInfo::set_has_istatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfParticipatorInfo::clear_has_istatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfParticipatorInfo::clear_istatus() {
  istatus_ = 0u;
  clear_has_istatus();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::istatus() const {
  return istatus_;
}
inline void ConfParticipatorInfo::set_istatus(::google::protobuf::uint32 value) {
  set_has_istatus();
  istatus_ = value;
}

// optional uint32 iPower = 7;
inline bool ConfParticipatorInfo::has_ipower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfParticipatorInfo::set_has_ipower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfParticipatorInfo::clear_has_ipower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfParticipatorInfo::clear_ipower() {
  ipower_ = 0u;
  clear_has_ipower();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::ipower() const {
  return ipower_;
}
inline void ConfParticipatorInfo::set_ipower(::google::protobuf::uint32 value) {
  set_has_ipower();
  ipower_ = value;
}

// optional uint32 iVolume = 8 [default = 128];
inline bool ConfParticipatorInfo::has_ivolume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfParticipatorInfo::set_has_ivolume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfParticipatorInfo::clear_has_ivolume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfParticipatorInfo::clear_ivolume() {
  ivolume_ = 128u;
  clear_has_ivolume();
}
inline ::google::protobuf::uint32 ConfParticipatorInfo::ivolume() const {
  return ivolume_;
}
inline void ConfParticipatorInfo::set_ivolume(::google::protobuf::uint32 value) {
  set_has_ivolume();
  ivolume_ = value;
}

// -------------------------------------------------------------------

// ConfParticipators

// repeated .BVCU.ConfParticipatorInfo confPorts = 1;
inline int ConfParticipators::confports_size() const {
  return confports_.size();
}
inline void ConfParticipators::clear_confports() {
  confports_.Clear();
}
inline const ::BVCU::ConfParticipatorInfo& ConfParticipators::confports(int index) const {
  return confports_.Get(index);
}
inline ::BVCU::ConfParticipatorInfo* ConfParticipators::mutable_confports(int index) {
  return confports_.Mutable(index);
}
inline ::BVCU::ConfParticipatorInfo* ConfParticipators::add_confports() {
  return confports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >&
ConfParticipators::confports() const {
  return confports_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >*
ConfParticipators::mutable_confports() {
  return &confports_;
}

// -------------------------------------------------------------------

// ConfParticipatorAddResult

// repeated uint32 iResultBits = 1;
inline int ConfParticipatorAddResult::iresultbits_size() const {
  return iresultbits_.size();
}
inline void ConfParticipatorAddResult::clear_iresultbits() {
  iresultbits_.Clear();
}
inline ::google::protobuf::uint32 ConfParticipatorAddResult::iresultbits(int index) const {
  return iresultbits_.Get(index);
}
inline void ConfParticipatorAddResult::set_iresultbits(int index, ::google::protobuf::uint32 value) {
  iresultbits_.Set(index, value);
}
inline void ConfParticipatorAddResult::add_iresultbits(::google::protobuf::uint32 value) {
  iresultbits_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConfParticipatorAddResult::iresultbits() const {
  return iresultbits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConfParticipatorAddResult::mutable_iresultbits() {
  return &iresultbits_;
}

// -------------------------------------------------------------------

// ConfInfo

// optional .BVCU.ConfBaseInfo baseInfo = 1;
inline bool ConfInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::BVCU::ConfBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::BVCU::ConfBaseInfo& ConfInfo::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::BVCU::ConfBaseInfo* ConfInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::BVCU::ConfBaseInfo;
  return baseinfo_;
}
inline ::BVCU::ConfBaseInfo* ConfInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::BVCU::ConfBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}

// repeated .BVCU.ConfParticipatorInfo pParticipators = 2;
inline int ConfInfo::pparticipators_size() const {
  return pparticipators_.size();
}
inline void ConfInfo::clear_pparticipators() {
  pparticipators_.Clear();
}
inline const ::BVCU::ConfParticipatorInfo& ConfInfo::pparticipators(int index) const {
  return pparticipators_.Get(index);
}
inline ::BVCU::ConfParticipatorInfo* ConfInfo::mutable_pparticipators(int index) {
  return pparticipators_.Mutable(index);
}
inline ::BVCU::ConfParticipatorInfo* ConfInfo::add_pparticipators() {
  return pparticipators_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >&
ConfInfo::pparticipators() const {
  return pparticipators_;
}
inline ::google::protobuf::RepeatedPtrField< ::BVCU::ConfParticipatorInfo >*
ConfInfo::mutable_pparticipators() {
  return &pparticipators_;
}

// optional uint32 pCreator = 3;
inline bool ConfInfo::has_pcreator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfInfo::set_has_pcreator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfInfo::clear_has_pcreator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfInfo::clear_pcreator() {
  pcreator_ = 0u;
  clear_has_pcreator();
}
inline ::google::protobuf::uint32 ConfInfo::pcreator() const {
  return pcreator_;
}
inline void ConfInfo::set_pcreator(::google::protobuf::uint32 value) {
  set_has_pcreator();
  pcreator_ = value;
}

// -------------------------------------------------------------------

// ConfParticipatorJoin

// optional bytes szPassword = 1;
inline bool ConfParticipatorJoin::has_szpassword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfParticipatorJoin::set_has_szpassword() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfParticipatorJoin::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfParticipatorJoin::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& ConfParticipatorJoin::szpassword() const {
  return *szpassword_;
}
inline void ConfParticipatorJoin::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void ConfParticipatorJoin::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void ConfParticipatorJoin::set_szpassword(const void* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorJoin::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* ConfParticipatorJoin::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string szAliasName = 2;
inline bool ConfParticipatorJoin::has_szaliasname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfParticipatorJoin::set_has_szaliasname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfParticipatorJoin::clear_has_szaliasname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfParticipatorJoin::clear_szaliasname() {
  if (szaliasname_ != &::google::protobuf::internal::kEmptyString) {
    szaliasname_->clear();
  }
  clear_has_szaliasname();
}
inline const ::std::string& ConfParticipatorJoin::szaliasname() const {
  return *szaliasname_;
}
inline void ConfParticipatorJoin::set_szaliasname(const ::std::string& value) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(value);
}
inline void ConfParticipatorJoin::set_szaliasname(const char* value) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(value);
}
inline void ConfParticipatorJoin::set_szaliasname(const char* value, size_t size) {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  szaliasname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfParticipatorJoin::mutable_szaliasname() {
  set_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    szaliasname_ = new ::std::string;
  }
  return szaliasname_;
}
inline ::std::string* ConfParticipatorJoin::release_szaliasname() {
  clear_has_szaliasname();
  if (szaliasname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szaliasname_;
    szaliasname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FTP_SESSION_OPEN

// optional uint32 iVersion = 1;
inline bool FTP_SESSION_OPEN::has_iversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FTP_SESSION_OPEN::set_has_iversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FTP_SESSION_OPEN::clear_has_iversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FTP_SESSION_OPEN::clear_iversion() {
  iversion_ = 0u;
  clear_has_iversion();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN::iversion() const {
  return iversion_;
}
inline void FTP_SESSION_OPEN::set_iversion(::google::protobuf::uint32 value) {
  set_has_iversion();
  iversion_ = value;
}

// optional int64 iRandomClient = 2;
inline bool FTP_SESSION_OPEN::has_irandomclient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FTP_SESSION_OPEN::set_has_irandomclient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FTP_SESSION_OPEN::clear_has_irandomclient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FTP_SESSION_OPEN::clear_irandomclient() {
  irandomclient_ = GOOGLE_LONGLONG(0);
  clear_has_irandomclient();
}
inline ::google::protobuf::int64 FTP_SESSION_OPEN::irandomclient() const {
  return irandomclient_;
}
inline void FTP_SESSION_OPEN::set_irandomclient(::google::protobuf::int64 value) {
  set_has_irandomclient();
  irandomclient_ = value;
}

// -------------------------------------------------------------------

// FTP_SESSION_OPEN_Stage1

// optional uint32 iVersion = 1;
inline bool FTP_SESSION_OPEN_Stage1::has_iversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_iversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_iversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_iversion() {
  iversion_ = 0u;
  clear_has_iversion();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage1::iversion() const {
  return iversion_;
}
inline void FTP_SESSION_OPEN_Stage1::set_iversion(::google::protobuf::uint32 value) {
  set_has_iversion();
  iversion_ = value;
}

// optional uint32 iFTPSessionID = 2;
inline bool FTP_SESSION_OPEN_Stage1::has_iftpsessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_iftpsessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_iftpsessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_iftpsessionid() {
  iftpsessionid_ = 0u;
  clear_has_iftpsessionid();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage1::iftpsessionid() const {
  return iftpsessionid_;
}
inline void FTP_SESSION_OPEN_Stage1::set_iftpsessionid(::google::protobuf::uint32 value) {
  set_has_iftpsessionid();
  iftpsessionid_ = value;
}

// optional int64 iKeyLow = 3;
inline bool FTP_SESSION_OPEN_Stage1::has_ikeylow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_ikeylow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_ikeylow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_ikeylow() {
  ikeylow_ = GOOGLE_LONGLONG(0);
  clear_has_ikeylow();
}
inline ::google::protobuf::int64 FTP_SESSION_OPEN_Stage1::ikeylow() const {
  return ikeylow_;
}
inline void FTP_SESSION_OPEN_Stage1::set_ikeylow(::google::protobuf::int64 value) {
  set_has_ikeylow();
  ikeylow_ = value;
}

// optional int64 iKeyHigh = 4;
inline bool FTP_SESSION_OPEN_Stage1::has_ikeyhigh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_ikeyhigh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_ikeyhigh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_ikeyhigh() {
  ikeyhigh_ = GOOGLE_LONGLONG(0);
  clear_has_ikeyhigh();
}
inline ::google::protobuf::int64 FTP_SESSION_OPEN_Stage1::ikeyhigh() const {
  return ikeyhigh_;
}
inline void FTP_SESSION_OPEN_Stage1::set_ikeyhigh(::google::protobuf::int64 value) {
  set_has_ikeyhigh();
  ikeyhigh_ = value;
}

// optional uint32 iCmdPort = 5;
inline bool FTP_SESSION_OPEN_Stage1::has_icmdport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_icmdport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_icmdport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_icmdport() {
  icmdport_ = 0u;
  clear_has_icmdport();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage1::icmdport() const {
  return icmdport_;
}
inline void FTP_SESSION_OPEN_Stage1::set_icmdport(::google::protobuf::uint32 value) {
  set_has_icmdport();
  icmdport_ = value;
}

// optional uint32 iDataPort = 6;
inline bool FTP_SESSION_OPEN_Stage1::has_idataport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FTP_SESSION_OPEN_Stage1::set_has_idataport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_has_idataport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FTP_SESSION_OPEN_Stage1::clear_idataport() {
  idataport_ = 0u;
  clear_has_idataport();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage1::idataport() const {
  return idataport_;
}
inline void FTP_SESSION_OPEN_Stage1::set_idataport(::google::protobuf::uint32 value) {
  set_has_idataport();
  idataport_ = value;
}

// -------------------------------------------------------------------

// FTP_SESSION_OPEN_Stage2

// optional uint32 iVersion = 1;
inline bool FTP_SESSION_OPEN_Stage2::has_iversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_iversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_iversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_iversion() {
  iversion_ = 0u;
  clear_has_iversion();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage2::iversion() const {
  return iversion_;
}
inline void FTP_SESSION_OPEN_Stage2::set_iversion(::google::protobuf::uint32 value) {
  set_has_iversion();
  iversion_ = value;
}

// optional uint32 iFTPSessionID = 2;
inline bool FTP_SESSION_OPEN_Stage2::has_iftpsessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_iftpsessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_iftpsessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_iftpsessionid() {
  iftpsessionid_ = 0u;
  clear_has_iftpsessionid();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage2::iftpsessionid() const {
  return iftpsessionid_;
}
inline void FTP_SESSION_OPEN_Stage2::set_iftpsessionid(::google::protobuf::uint32 value) {
  set_has_iftpsessionid();
  iftpsessionid_ = value;
}

// optional int64 iKeyLow = 3;
inline bool FTP_SESSION_OPEN_Stage2::has_ikeylow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_ikeylow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_ikeylow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_ikeylow() {
  ikeylow_ = GOOGLE_LONGLONG(0);
  clear_has_ikeylow();
}
inline ::google::protobuf::int64 FTP_SESSION_OPEN_Stage2::ikeylow() const {
  return ikeylow_;
}
inline void FTP_SESSION_OPEN_Stage2::set_ikeylow(::google::protobuf::int64 value) {
  set_has_ikeylow();
  ikeylow_ = value;
}

// optional int64 iKeyHigh = 4;
inline bool FTP_SESSION_OPEN_Stage2::has_ikeyhigh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_ikeyhigh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_ikeyhigh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_ikeyhigh() {
  ikeyhigh_ = GOOGLE_LONGLONG(0);
  clear_has_ikeyhigh();
}
inline ::google::protobuf::int64 FTP_SESSION_OPEN_Stage2::ikeyhigh() const {
  return ikeyhigh_;
}
inline void FTP_SESSION_OPEN_Stage2::set_ikeyhigh(::google::protobuf::int64 value) {
  set_has_ikeyhigh();
  ikeyhigh_ = value;
}

// optional uint32 iCmdPort = 5;
inline bool FTP_SESSION_OPEN_Stage2::has_icmdport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_icmdport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_icmdport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_icmdport() {
  icmdport_ = 0u;
  clear_has_icmdport();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage2::icmdport() const {
  return icmdport_;
}
inline void FTP_SESSION_OPEN_Stage2::set_icmdport(::google::protobuf::uint32 value) {
  set_has_icmdport();
  icmdport_ = value;
}

// optional uint32 iDataPort = 6;
inline bool FTP_SESSION_OPEN_Stage2::has_idataport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_idataport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_idataport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_idataport() {
  idataport_ = 0u;
  clear_has_idataport();
}
inline ::google::protobuf::uint32 FTP_SESSION_OPEN_Stage2::idataport() const {
  return idataport_;
}
inline void FTP_SESSION_OPEN_Stage2::set_idataport(::google::protobuf::uint32 value) {
  set_has_idataport();
  idataport_ = value;
}

// optional string szAddr = 7;
inline bool FTP_SESSION_OPEN_Stage2::has_szaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FTP_SESSION_OPEN_Stage2::set_has_szaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_has_szaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FTP_SESSION_OPEN_Stage2::clear_szaddr() {
  if (szaddr_ != &::google::protobuf::internal::kEmptyString) {
    szaddr_->clear();
  }
  clear_has_szaddr();
}
inline const ::std::string& FTP_SESSION_OPEN_Stage2::szaddr() const {
  return *szaddr_;
}
inline void FTP_SESSION_OPEN_Stage2::set_szaddr(const ::std::string& value) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(value);
}
inline void FTP_SESSION_OPEN_Stage2::set_szaddr(const char* value) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(value);
}
inline void FTP_SESSION_OPEN_Stage2::set_szaddr(const char* value, size_t size) {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  szaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FTP_SESSION_OPEN_Stage2::mutable_szaddr() {
  set_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    szaddr_ = new ::std::string;
  }
  return szaddr_;
}
inline ::std::string* FTP_SESSION_OPEN_Stage2::release_szaddr() {
  clear_has_szaddr();
  if (szaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szaddr_;
    szaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BVCU

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BVCUConfig_2eproto__INCLUDED
