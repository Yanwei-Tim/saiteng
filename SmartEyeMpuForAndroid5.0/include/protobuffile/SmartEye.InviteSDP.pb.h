// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmartEye.InviteSDP.proto

#ifndef PROTOBUF_SmartEye_2eInviteSDP_2eproto__INCLUDED
#define PROTOBUF_SmartEye_2eInviteSDP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SmartEye {
namespace InviteSDP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();

class sdp_origin;
class sdp_conn;
class sdp_bandw;
class sdp_time;
class sdp_attr;
class sdp_desc;
class sdp_media;
class sdp_session;

// ===================================================================

class sdp_origin : public ::google::protobuf::Message {
 public:
  sdp_origin();
  virtual ~sdp_origin();
  
  sdp_origin(const sdp_origin& from);
  
  inline sdp_origin& operator=(const sdp_origin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_origin& default_instance();
  
  void Swap(sdp_origin* other);
  
  // implements Message ----------------------------------------------
  
  sdp_origin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_origin& from);
  void MergeFrom(const sdp_origin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // optional string net_type = 4;
  inline bool has_net_type() const;
  inline void clear_net_type();
  static const int kNetTypeFieldNumber = 4;
  inline const ::std::string& net_type() const;
  inline void set_net_type(const ::std::string& value);
  inline void set_net_type(const char* value);
  inline void set_net_type(const char* value, size_t size);
  inline ::std::string* mutable_net_type();
  inline ::std::string* release_net_type();
  
  // optional string addr_type = 5;
  inline bool has_addr_type() const;
  inline void clear_addr_type();
  static const int kAddrTypeFieldNumber = 5;
  inline const ::std::string& addr_type() const;
  inline void set_addr_type(const ::std::string& value);
  inline void set_addr_type(const char* value);
  inline void set_addr_type(const char* value, size_t size);
  inline ::std::string* mutable_addr_type();
  inline ::std::string* release_addr_type();
  
  // optional string addr = 6;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 6;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_origin)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_net_type();
  inline void clear_has_net_type();
  inline void set_has_addr_type();
  inline void clear_has_addr_type();
  inline void set_has_addr();
  inline void clear_has_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 version_;
  ::std::string* net_type_;
  ::std::string* addr_type_;
  ::std::string* addr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_origin* default_instance_;
};
// -------------------------------------------------------------------

class sdp_conn : public ::google::protobuf::Message {
 public:
  sdp_conn();
  virtual ~sdp_conn();
  
  sdp_conn(const sdp_conn& from);
  
  inline sdp_conn& operator=(const sdp_conn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_conn& default_instance();
  
  void Swap(sdp_conn* other);
  
  // implements Message ----------------------------------------------
  
  sdp_conn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_conn& from);
  void MergeFrom(const sdp_conn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string net_type = 1;
  inline bool has_net_type() const;
  inline void clear_net_type();
  static const int kNetTypeFieldNumber = 1;
  inline const ::std::string& net_type() const;
  inline void set_net_type(const ::std::string& value);
  inline void set_net_type(const char* value);
  inline void set_net_type(const char* value, size_t size);
  inline ::std::string* mutable_net_type();
  inline ::std::string* release_net_type();
  
  // optional string addr_type = 2;
  inline bool has_addr_type() const;
  inline void clear_addr_type();
  static const int kAddrTypeFieldNumber = 2;
  inline const ::std::string& addr_type() const;
  inline void set_addr_type(const ::std::string& value);
  inline void set_addr_type(const char* value);
  inline void set_addr_type(const char* value, size_t size);
  inline ::std::string* mutable_addr_type();
  inline ::std::string* release_addr_type();
  
  // optional string addr = 3;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 3;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_conn)
 private:
  inline void set_has_net_type();
  inline void clear_has_net_type();
  inline void set_has_addr_type();
  inline void clear_has_addr_type();
  inline void set_has_addr();
  inline void clear_has_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* net_type_;
  ::std::string* addr_type_;
  ::std::string* addr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_conn* default_instance_;
};
// -------------------------------------------------------------------

class sdp_bandw : public ::google::protobuf::Message {
 public:
  sdp_bandw();
  virtual ~sdp_bandw();
  
  sdp_bandw(const sdp_bandw& from);
  
  inline sdp_bandw& operator=(const sdp_bandw& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_bandw& default_instance();
  
  void Swap(sdp_bandw* other);
  
  // implements Message ----------------------------------------------
  
  sdp_bandw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_bandw& from);
  void MergeFrom(const sdp_bandw& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string modifier = 1;
  inline bool has_modifier() const;
  inline void clear_modifier();
  static const int kModifierFieldNumber = 1;
  inline const ::std::string& modifier() const;
  inline void set_modifier(const ::std::string& value);
  inline void set_modifier(const char* value);
  inline void set_modifier(const char* value, size_t size);
  inline ::std::string* mutable_modifier();
  inline ::std::string* release_modifier();
  
  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_bandw)
 private:
  inline void set_has_modifier();
  inline void clear_has_modifier();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* modifier_;
  ::google::protobuf::uint32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_bandw* default_instance_;
};
// -------------------------------------------------------------------

class sdp_time : public ::google::protobuf::Message {
 public:
  sdp_time();
  virtual ~sdp_time();
  
  sdp_time(const sdp_time& from);
  
  inline sdp_time& operator=(const sdp_time& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_time& default_instance();
  
  void Swap(sdp_time* other);
  
  // implements Message ----------------------------------------------
  
  sdp_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_time& from);
  void MergeFrom(const sdp_time& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);
  
  // optional uint32 stop = 2;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 2;
  inline ::google::protobuf::uint32 stop() const;
  inline void set_stop(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_time)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_stop();
  inline void clear_has_stop();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 stop_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_time* default_instance_;
};
// -------------------------------------------------------------------

class sdp_attr : public ::google::protobuf::Message {
 public:
  sdp_attr();
  virtual ~sdp_attr();
  
  sdp_attr(const sdp_attr& from);
  
  inline sdp_attr& operator=(const sdp_attr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_attr& default_instance();
  
  void Swap(sdp_attr* other);
  
  // implements Message ----------------------------------------------
  
  sdp_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_attr& from);
  void MergeFrom(const sdp_attr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_attr)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_attr* default_instance_;
};
// -------------------------------------------------------------------

class sdp_desc : public ::google::protobuf::Message {
 public:
  sdp_desc();
  virtual ~sdp_desc();
  
  sdp_desc(const sdp_desc& from);
  
  inline sdp_desc& operator=(const sdp_desc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_desc& default_instance();
  
  void Swap(sdp_desc* other);
  
  // implements Message ----------------------------------------------
  
  sdp_desc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_desc& from);
  void MergeFrom(const sdp_desc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string media = 1;
  inline bool has_media() const;
  inline void clear_media();
  static const int kMediaFieldNumber = 1;
  inline const ::std::string& media() const;
  inline void set_media(const ::std::string& value);
  inline void set_media(const char* value);
  inline void set_media(const char* value, size_t size);
  inline ::std::string* mutable_media();
  inline ::std::string* release_media();
  
  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional uint32 port_count = 3;
  inline bool has_port_count() const;
  inline void clear_port_count();
  static const int kPortCountFieldNumber = 3;
  inline ::google::protobuf::uint32 port_count() const;
  inline void set_port_count(::google::protobuf::uint32 value);
  
  // optional string transport = 4;
  inline bool has_transport() const;
  inline void clear_transport();
  static const int kTransportFieldNumber = 4;
  inline const ::std::string& transport() const;
  inline void set_transport(const ::std::string& value);
  inline void set_transport(const char* value);
  inline void set_transport(const char* value, size_t size);
  inline ::std::string* mutable_transport();
  inline ::std::string* release_transport();
  
  // repeated string fmt = 5;
  inline int fmt_size() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 5;
  inline const ::std::string& fmt(int index) const;
  inline ::std::string* mutable_fmt(int index);
  inline void set_fmt(int index, const ::std::string& value);
  inline void set_fmt(int index, const char* value);
  inline void set_fmt(int index, const char* value, size_t size);
  inline ::std::string* add_fmt();
  inline void add_fmt(const ::std::string& value);
  inline void add_fmt(const char* value);
  inline void add_fmt(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fmt();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_desc)
 private:
  inline void set_has_media();
  inline void clear_has_media();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_port_count();
  inline void clear_has_port_count();
  inline void set_has_transport();
  inline void clear_has_transport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* media_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 port_count_;
  ::std::string* transport_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fmt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_desc* default_instance_;
};
// -------------------------------------------------------------------

class sdp_media : public ::google::protobuf::Message {
 public:
  sdp_media();
  virtual ~sdp_media();
  
  sdp_media(const sdp_media& from);
  
  inline sdp_media& operator=(const sdp_media& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_media& default_instance();
  
  void Swap(sdp_media* other);
  
  // implements Message ----------------------------------------------
  
  sdp_media* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_media& from);
  void MergeFrom(const sdp_media& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .SmartEye.InviteSDP.sdp_desc desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::SmartEye::InviteSDP::sdp_desc& desc() const;
  inline ::SmartEye::InviteSDP::sdp_desc* mutable_desc();
  inline ::SmartEye::InviteSDP::sdp_desc* release_desc();
  
  // optional .SmartEye.InviteSDP.sdp_conn conn = 2;
  inline bool has_conn() const;
  inline void clear_conn();
  static const int kConnFieldNumber = 2;
  inline const ::SmartEye::InviteSDP::sdp_conn& conn() const;
  inline ::SmartEye::InviteSDP::sdp_conn* mutable_conn();
  inline ::SmartEye::InviteSDP::sdp_conn* release_conn();
  
  // repeated .SmartEye.InviteSDP.sdp_bandw bandw = 3;
  inline int bandw_size() const;
  inline void clear_bandw();
  static const int kBandwFieldNumber = 3;
  inline const ::SmartEye::InviteSDP::sdp_bandw& bandw(int index) const;
  inline ::SmartEye::InviteSDP::sdp_bandw* mutable_bandw(int index);
  inline ::SmartEye::InviteSDP::sdp_bandw* add_bandw();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >&
      bandw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >*
      mutable_bandw();
  
  // repeated .SmartEye.InviteSDP.sdp_attr attr = 4;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 4;
  inline const ::SmartEye::InviteSDP::sdp_attr& attr(int index) const;
  inline ::SmartEye::InviteSDP::sdp_attr* mutable_attr(int index);
  inline ::SmartEye::InviteSDP::sdp_attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >*
      mutable_attr();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_media)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_conn();
  inline void clear_has_conn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SmartEye::InviteSDP::sdp_desc* desc_;
  ::SmartEye::InviteSDP::sdp_conn* conn_;
  ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw > bandw_;
  ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr > attr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_media* default_instance_;
};
// -------------------------------------------------------------------

class sdp_session : public ::google::protobuf::Message {
 public:
  sdp_session();
  virtual ~sdp_session();
  
  sdp_session(const sdp_session& from);
  
  inline sdp_session& operator=(const sdp_session& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sdp_session& default_instance();
  
  void Swap(sdp_session* other);
  
  // implements Message ----------------------------------------------
  
  sdp_session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdp_session& from);
  void MergeFrom(const sdp_session& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .SmartEye.InviteSDP.sdp_origin origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::SmartEye::InviteSDP::sdp_origin& origin() const;
  inline ::SmartEye::InviteSDP::sdp_origin* mutable_origin();
  inline ::SmartEye::InviteSDP::sdp_origin* release_origin();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .SmartEye.InviteSDP.sdp_conn conn = 3;
  inline bool has_conn() const;
  inline void clear_conn();
  static const int kConnFieldNumber = 3;
  inline const ::SmartEye::InviteSDP::sdp_conn& conn() const;
  inline ::SmartEye::InviteSDP::sdp_conn* mutable_conn();
  inline ::SmartEye::InviteSDP::sdp_conn* release_conn();
  
  // repeated .SmartEye.InviteSDP.sdp_bandw bandw = 4;
  inline int bandw_size() const;
  inline void clear_bandw();
  static const int kBandwFieldNumber = 4;
  inline const ::SmartEye::InviteSDP::sdp_bandw& bandw(int index) const;
  inline ::SmartEye::InviteSDP::sdp_bandw* mutable_bandw(int index);
  inline ::SmartEye::InviteSDP::sdp_bandw* add_bandw();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >&
      bandw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >*
      mutable_bandw();
  
  // optional .SmartEye.InviteSDP.sdp_time time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::SmartEye::InviteSDP::sdp_time& time() const;
  inline ::SmartEye::InviteSDP::sdp_time* mutable_time();
  inline ::SmartEye::InviteSDP::sdp_time* release_time();
  
  // repeated .SmartEye.InviteSDP.sdp_attr attr = 6;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 6;
  inline const ::SmartEye::InviteSDP::sdp_attr& attr(int index) const;
  inline ::SmartEye::InviteSDP::sdp_attr* mutable_attr(int index);
  inline ::SmartEye::InviteSDP::sdp_attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >*
      mutable_attr();
  
  // repeated .SmartEye.InviteSDP.sdp_media media = 7;
  inline int media_size() const;
  inline void clear_media();
  static const int kMediaFieldNumber = 7;
  inline const ::SmartEye::InviteSDP::sdp_media& media(int index) const;
  inline ::SmartEye::InviteSDP::sdp_media* mutable_media(int index);
  inline ::SmartEye::InviteSDP::sdp_media* add_media();
  inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_media >&
      media() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_media >*
      mutable_media();
  
  // @@protoc_insertion_point(class_scope:SmartEye.InviteSDP.sdp_session)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_conn();
  inline void clear_has_conn();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SmartEye::InviteSDP::sdp_origin* origin_;
  ::std::string* name_;
  ::SmartEye::InviteSDP::sdp_conn* conn_;
  ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw > bandw_;
  ::SmartEye::InviteSDP::sdp_time* time_;
  ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr > attr_;
  ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_media > media_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_AssignDesc_SmartEye_2eInviteSDP_2eproto();
  friend void protobuf_ShutdownFile_SmartEye_2eInviteSDP_2eproto();
  
  void InitAsDefaultInstance();
  static sdp_session* default_instance_;
};
// ===================================================================


// ===================================================================

// sdp_origin

// optional string user = 1;
inline bool sdp_origin::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_origin::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_origin::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_origin::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& sdp_origin::user() const {
  return *user_;
}
inline void sdp_origin::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void sdp_origin::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void sdp_origin::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_origin::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* sdp_origin::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 id = 2;
inline bool sdp_origin::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_origin::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_origin::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_origin::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 sdp_origin::id() const {
  return id_;
}
inline void sdp_origin::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 version = 3;
inline bool sdp_origin::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sdp_origin::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sdp_origin::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sdp_origin::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 sdp_origin::version() const {
  return version_;
}
inline void sdp_origin::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional string net_type = 4;
inline bool sdp_origin::has_net_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sdp_origin::set_has_net_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sdp_origin::clear_has_net_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sdp_origin::clear_net_type() {
  if (net_type_ != &::google::protobuf::internal::kEmptyString) {
    net_type_->clear();
  }
  clear_has_net_type();
}
inline const ::std::string& sdp_origin::net_type() const {
  return *net_type_;
}
inline void sdp_origin::set_net_type(const ::std::string& value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
}
inline void sdp_origin::set_net_type(const char* value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
}
inline void sdp_origin::set_net_type(const char* value, size_t size) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_origin::mutable_net_type() {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  return net_type_;
}
inline ::std::string* sdp_origin::release_net_type() {
  clear_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = net_type_;
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addr_type = 5;
inline bool sdp_origin::has_addr_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sdp_origin::set_has_addr_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sdp_origin::clear_has_addr_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sdp_origin::clear_addr_type() {
  if (addr_type_ != &::google::protobuf::internal::kEmptyString) {
    addr_type_->clear();
  }
  clear_has_addr_type();
}
inline const ::std::string& sdp_origin::addr_type() const {
  return *addr_type_;
}
inline void sdp_origin::set_addr_type(const ::std::string& value) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(value);
}
inline void sdp_origin::set_addr_type(const char* value) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(value);
}
inline void sdp_origin::set_addr_type(const char* value, size_t size) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_origin::mutable_addr_type() {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  return addr_type_;
}
inline ::std::string* sdp_origin::release_addr_type() {
  clear_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_type_;
    addr_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addr = 6;
inline bool sdp_origin::has_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sdp_origin::set_has_addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sdp_origin::clear_has_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sdp_origin::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& sdp_origin::addr() const {
  return *addr_;
}
inline void sdp_origin::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void sdp_origin::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void sdp_origin::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_origin::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* sdp_origin::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// sdp_conn

// optional string net_type = 1;
inline bool sdp_conn::has_net_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_conn::set_has_net_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_conn::clear_has_net_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_conn::clear_net_type() {
  if (net_type_ != &::google::protobuf::internal::kEmptyString) {
    net_type_->clear();
  }
  clear_has_net_type();
}
inline const ::std::string& sdp_conn::net_type() const {
  return *net_type_;
}
inline void sdp_conn::set_net_type(const ::std::string& value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
}
inline void sdp_conn::set_net_type(const char* value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
}
inline void sdp_conn::set_net_type(const char* value, size_t size) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_conn::mutable_net_type() {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    net_type_ = new ::std::string;
  }
  return net_type_;
}
inline ::std::string* sdp_conn::release_net_type() {
  clear_has_net_type();
  if (net_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = net_type_;
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addr_type = 2;
inline bool sdp_conn::has_addr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_conn::set_has_addr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_conn::clear_has_addr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_conn::clear_addr_type() {
  if (addr_type_ != &::google::protobuf::internal::kEmptyString) {
    addr_type_->clear();
  }
  clear_has_addr_type();
}
inline const ::std::string& sdp_conn::addr_type() const {
  return *addr_type_;
}
inline void sdp_conn::set_addr_type(const ::std::string& value) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(value);
}
inline void sdp_conn::set_addr_type(const char* value) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(value);
}
inline void sdp_conn::set_addr_type(const char* value, size_t size) {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  addr_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_conn::mutable_addr_type() {
  set_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    addr_type_ = new ::std::string;
  }
  return addr_type_;
}
inline ::std::string* sdp_conn::release_addr_type() {
  clear_has_addr_type();
  if (addr_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_type_;
    addr_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addr = 3;
inline bool sdp_conn::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sdp_conn::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sdp_conn::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sdp_conn::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& sdp_conn::addr() const {
  return *addr_;
}
inline void sdp_conn::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void sdp_conn::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void sdp_conn::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_conn::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* sdp_conn::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// sdp_bandw

// optional string modifier = 1;
inline bool sdp_bandw::has_modifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_bandw::set_has_modifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_bandw::clear_has_modifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_bandw::clear_modifier() {
  if (modifier_ != &::google::protobuf::internal::kEmptyString) {
    modifier_->clear();
  }
  clear_has_modifier();
}
inline const ::std::string& sdp_bandw::modifier() const {
  return *modifier_;
}
inline void sdp_bandw::set_modifier(const ::std::string& value) {
  set_has_modifier();
  if (modifier_ == &::google::protobuf::internal::kEmptyString) {
    modifier_ = new ::std::string;
  }
  modifier_->assign(value);
}
inline void sdp_bandw::set_modifier(const char* value) {
  set_has_modifier();
  if (modifier_ == &::google::protobuf::internal::kEmptyString) {
    modifier_ = new ::std::string;
  }
  modifier_->assign(value);
}
inline void sdp_bandw::set_modifier(const char* value, size_t size) {
  set_has_modifier();
  if (modifier_ == &::google::protobuf::internal::kEmptyString) {
    modifier_ = new ::std::string;
  }
  modifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_bandw::mutable_modifier() {
  set_has_modifier();
  if (modifier_ == &::google::protobuf::internal::kEmptyString) {
    modifier_ = new ::std::string;
  }
  return modifier_;
}
inline ::std::string* sdp_bandw::release_modifier() {
  clear_has_modifier();
  if (modifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modifier_;
    modifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 value = 2;
inline bool sdp_bandw::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_bandw::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_bandw::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_bandw::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 sdp_bandw::value() const {
  return value_;
}
inline void sdp_bandw::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// sdp_time

// optional uint32 start = 1;
inline bool sdp_time::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_time::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_time::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_time::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 sdp_time::start() const {
  return start_;
}
inline void sdp_time::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 stop = 2;
inline bool sdp_time::has_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_time::set_has_stop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_time::clear_has_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_time::clear_stop() {
  stop_ = 0u;
  clear_has_stop();
}
inline ::google::protobuf::uint32 sdp_time::stop() const {
  return stop_;
}
inline void sdp_time::set_stop(::google::protobuf::uint32 value) {
  set_has_stop();
  stop_ = value;
}

// -------------------------------------------------------------------

// sdp_attr

// optional string name = 1;
inline bool sdp_attr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_attr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_attr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_attr::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sdp_attr::name() const {
  return *name_;
}
inline void sdp_attr::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sdp_attr::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sdp_attr::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_attr::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sdp_attr::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool sdp_attr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_attr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_attr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_attr::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& sdp_attr::value() const {
  return *value_;
}
inline void sdp_attr::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void sdp_attr::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void sdp_attr::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_attr::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* sdp_attr::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// sdp_desc

// optional string media = 1;
inline bool sdp_desc::has_media() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_desc::set_has_media() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_desc::clear_has_media() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_desc::clear_media() {
  if (media_ != &::google::protobuf::internal::kEmptyString) {
    media_->clear();
  }
  clear_has_media();
}
inline const ::std::string& sdp_desc::media() const {
  return *media_;
}
inline void sdp_desc::set_media(const ::std::string& value) {
  set_has_media();
  if (media_ == &::google::protobuf::internal::kEmptyString) {
    media_ = new ::std::string;
  }
  media_->assign(value);
}
inline void sdp_desc::set_media(const char* value) {
  set_has_media();
  if (media_ == &::google::protobuf::internal::kEmptyString) {
    media_ = new ::std::string;
  }
  media_->assign(value);
}
inline void sdp_desc::set_media(const char* value, size_t size) {
  set_has_media();
  if (media_ == &::google::protobuf::internal::kEmptyString) {
    media_ = new ::std::string;
  }
  media_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_desc::mutable_media() {
  set_has_media();
  if (media_ == &::google::protobuf::internal::kEmptyString) {
    media_ = new ::std::string;
  }
  return media_;
}
inline ::std::string* sdp_desc::release_media() {
  clear_has_media();
  if (media_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = media_;
    media_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 2;
inline bool sdp_desc::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_desc::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_desc::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_desc::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 sdp_desc::port() const {
  return port_;
}
inline void sdp_desc::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 port_count = 3;
inline bool sdp_desc::has_port_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sdp_desc::set_has_port_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sdp_desc::clear_has_port_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sdp_desc::clear_port_count() {
  port_count_ = 0u;
  clear_has_port_count();
}
inline ::google::protobuf::uint32 sdp_desc::port_count() const {
  return port_count_;
}
inline void sdp_desc::set_port_count(::google::protobuf::uint32 value) {
  set_has_port_count();
  port_count_ = value;
}

// optional string transport = 4;
inline bool sdp_desc::has_transport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sdp_desc::set_has_transport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sdp_desc::clear_has_transport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sdp_desc::clear_transport() {
  if (transport_ != &::google::protobuf::internal::kEmptyString) {
    transport_->clear();
  }
  clear_has_transport();
}
inline const ::std::string& sdp_desc::transport() const {
  return *transport_;
}
inline void sdp_desc::set_transport(const ::std::string& value) {
  set_has_transport();
  if (transport_ == &::google::protobuf::internal::kEmptyString) {
    transport_ = new ::std::string;
  }
  transport_->assign(value);
}
inline void sdp_desc::set_transport(const char* value) {
  set_has_transport();
  if (transport_ == &::google::protobuf::internal::kEmptyString) {
    transport_ = new ::std::string;
  }
  transport_->assign(value);
}
inline void sdp_desc::set_transport(const char* value, size_t size) {
  set_has_transport();
  if (transport_ == &::google::protobuf::internal::kEmptyString) {
    transport_ = new ::std::string;
  }
  transport_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_desc::mutable_transport() {
  set_has_transport();
  if (transport_ == &::google::protobuf::internal::kEmptyString) {
    transport_ = new ::std::string;
  }
  return transport_;
}
inline ::std::string* sdp_desc::release_transport() {
  clear_has_transport();
  if (transport_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transport_;
    transport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string fmt = 5;
inline int sdp_desc::fmt_size() const {
  return fmt_.size();
}
inline void sdp_desc::clear_fmt() {
  fmt_.Clear();
}
inline const ::std::string& sdp_desc::fmt(int index) const {
  return fmt_.Get(index);
}
inline ::std::string* sdp_desc::mutable_fmt(int index) {
  return fmt_.Mutable(index);
}
inline void sdp_desc::set_fmt(int index, const ::std::string& value) {
  fmt_.Mutable(index)->assign(value);
}
inline void sdp_desc::set_fmt(int index, const char* value) {
  fmt_.Mutable(index)->assign(value);
}
inline void sdp_desc::set_fmt(int index, const char* value, size_t size) {
  fmt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_desc::add_fmt() {
  return fmt_.Add();
}
inline void sdp_desc::add_fmt(const ::std::string& value) {
  fmt_.Add()->assign(value);
}
inline void sdp_desc::add_fmt(const char* value) {
  fmt_.Add()->assign(value);
}
inline void sdp_desc::add_fmt(const char* value, size_t size) {
  fmt_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sdp_desc::fmt() const {
  return fmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sdp_desc::mutable_fmt() {
  return &fmt_;
}

// -------------------------------------------------------------------

// sdp_media

// optional .SmartEye.InviteSDP.sdp_desc desc = 1;
inline bool sdp_media::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_media::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_media::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_media::clear_desc() {
  if (desc_ != NULL) desc_->::SmartEye::InviteSDP::sdp_desc::Clear();
  clear_has_desc();
}
inline const ::SmartEye::InviteSDP::sdp_desc& sdp_media::desc() const {
  return desc_ != NULL ? *desc_ : *default_instance_->desc_;
}
inline ::SmartEye::InviteSDP::sdp_desc* sdp_media::mutable_desc() {
  set_has_desc();
  if (desc_ == NULL) desc_ = new ::SmartEye::InviteSDP::sdp_desc;
  return desc_;
}
inline ::SmartEye::InviteSDP::sdp_desc* sdp_media::release_desc() {
  clear_has_desc();
  ::SmartEye::InviteSDP::sdp_desc* temp = desc_;
  desc_ = NULL;
  return temp;
}

// optional .SmartEye.InviteSDP.sdp_conn conn = 2;
inline bool sdp_media::has_conn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_media::set_has_conn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_media::clear_has_conn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_media::clear_conn() {
  if (conn_ != NULL) conn_->::SmartEye::InviteSDP::sdp_conn::Clear();
  clear_has_conn();
}
inline const ::SmartEye::InviteSDP::sdp_conn& sdp_media::conn() const {
  return conn_ != NULL ? *conn_ : *default_instance_->conn_;
}
inline ::SmartEye::InviteSDP::sdp_conn* sdp_media::mutable_conn() {
  set_has_conn();
  if (conn_ == NULL) conn_ = new ::SmartEye::InviteSDP::sdp_conn;
  return conn_;
}
inline ::SmartEye::InviteSDP::sdp_conn* sdp_media::release_conn() {
  clear_has_conn();
  ::SmartEye::InviteSDP::sdp_conn* temp = conn_;
  conn_ = NULL;
  return temp;
}

// repeated .SmartEye.InviteSDP.sdp_bandw bandw = 3;
inline int sdp_media::bandw_size() const {
  return bandw_.size();
}
inline void sdp_media::clear_bandw() {
  bandw_.Clear();
}
inline const ::SmartEye::InviteSDP::sdp_bandw& sdp_media::bandw(int index) const {
  return bandw_.Get(index);
}
inline ::SmartEye::InviteSDP::sdp_bandw* sdp_media::mutable_bandw(int index) {
  return bandw_.Mutable(index);
}
inline ::SmartEye::InviteSDP::sdp_bandw* sdp_media::add_bandw() {
  return bandw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >&
sdp_media::bandw() const {
  return bandw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >*
sdp_media::mutable_bandw() {
  return &bandw_;
}

// repeated .SmartEye.InviteSDP.sdp_attr attr = 4;
inline int sdp_media::attr_size() const {
  return attr_.size();
}
inline void sdp_media::clear_attr() {
  attr_.Clear();
}
inline const ::SmartEye::InviteSDP::sdp_attr& sdp_media::attr(int index) const {
  return attr_.Get(index);
}
inline ::SmartEye::InviteSDP::sdp_attr* sdp_media::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::SmartEye::InviteSDP::sdp_attr* sdp_media::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >&
sdp_media::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >*
sdp_media::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// sdp_session

// optional .SmartEye.InviteSDP.sdp_origin origin = 1;
inline bool sdp_session::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdp_session::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdp_session::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdp_session::clear_origin() {
  if (origin_ != NULL) origin_->::SmartEye::InviteSDP::sdp_origin::Clear();
  clear_has_origin();
}
inline const ::SmartEye::InviteSDP::sdp_origin& sdp_session::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::SmartEye::InviteSDP::sdp_origin* sdp_session::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::SmartEye::InviteSDP::sdp_origin;
  return origin_;
}
inline ::SmartEye::InviteSDP::sdp_origin* sdp_session::release_origin() {
  clear_has_origin();
  ::SmartEye::InviteSDP::sdp_origin* temp = origin_;
  origin_ = NULL;
  return temp;
}

// optional string name = 2;
inline bool sdp_session::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdp_session::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdp_session::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdp_session::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sdp_session::name() const {
  return *name_;
}
inline void sdp_session::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sdp_session::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sdp_session::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sdp_session::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sdp_session::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .SmartEye.InviteSDP.sdp_conn conn = 3;
inline bool sdp_session::has_conn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sdp_session::set_has_conn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sdp_session::clear_has_conn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sdp_session::clear_conn() {
  if (conn_ != NULL) conn_->::SmartEye::InviteSDP::sdp_conn::Clear();
  clear_has_conn();
}
inline const ::SmartEye::InviteSDP::sdp_conn& sdp_session::conn() const {
  return conn_ != NULL ? *conn_ : *default_instance_->conn_;
}
inline ::SmartEye::InviteSDP::sdp_conn* sdp_session::mutable_conn() {
  set_has_conn();
  if (conn_ == NULL) conn_ = new ::SmartEye::InviteSDP::sdp_conn;
  return conn_;
}
inline ::SmartEye::InviteSDP::sdp_conn* sdp_session::release_conn() {
  clear_has_conn();
  ::SmartEye::InviteSDP::sdp_conn* temp = conn_;
  conn_ = NULL;
  return temp;
}

// repeated .SmartEye.InviteSDP.sdp_bandw bandw = 4;
inline int sdp_session::bandw_size() const {
  return bandw_.size();
}
inline void sdp_session::clear_bandw() {
  bandw_.Clear();
}
inline const ::SmartEye::InviteSDP::sdp_bandw& sdp_session::bandw(int index) const {
  return bandw_.Get(index);
}
inline ::SmartEye::InviteSDP::sdp_bandw* sdp_session::mutable_bandw(int index) {
  return bandw_.Mutable(index);
}
inline ::SmartEye::InviteSDP::sdp_bandw* sdp_session::add_bandw() {
  return bandw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >&
sdp_session::bandw() const {
  return bandw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_bandw >*
sdp_session::mutable_bandw() {
  return &bandw_;
}

// optional .SmartEye.InviteSDP.sdp_time time = 5;
inline bool sdp_session::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sdp_session::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sdp_session::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sdp_session::clear_time() {
  if (time_ != NULL) time_->::SmartEye::InviteSDP::sdp_time::Clear();
  clear_has_time();
}
inline const ::SmartEye::InviteSDP::sdp_time& sdp_session::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::SmartEye::InviteSDP::sdp_time* sdp_session::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::SmartEye::InviteSDP::sdp_time;
  return time_;
}
inline ::SmartEye::InviteSDP::sdp_time* sdp_session::release_time() {
  clear_has_time();
  ::SmartEye::InviteSDP::sdp_time* temp = time_;
  time_ = NULL;
  return temp;
}

// repeated .SmartEye.InviteSDP.sdp_attr attr = 6;
inline int sdp_session::attr_size() const {
  return attr_.size();
}
inline void sdp_session::clear_attr() {
  attr_.Clear();
}
inline const ::SmartEye::InviteSDP::sdp_attr& sdp_session::attr(int index) const {
  return attr_.Get(index);
}
inline ::SmartEye::InviteSDP::sdp_attr* sdp_session::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::SmartEye::InviteSDP::sdp_attr* sdp_session::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >&
sdp_session::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_attr >*
sdp_session::mutable_attr() {
  return &attr_;
}

// repeated .SmartEye.InviteSDP.sdp_media media = 7;
inline int sdp_session::media_size() const {
  return media_.size();
}
inline void sdp_session::clear_media() {
  media_.Clear();
}
inline const ::SmartEye::InviteSDP::sdp_media& sdp_session::media(int index) const {
  return media_.Get(index);
}
inline ::SmartEye::InviteSDP::sdp_media* sdp_session::mutable_media(int index) {
  return media_.Mutable(index);
}
inline ::SmartEye::InviteSDP::sdp_media* sdp_session::add_media() {
  return media_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_media >&
sdp_session::media() const {
  return media_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmartEye::InviteSDP::sdp_media >*
sdp_session::mutable_media() {
  return &media_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InviteSDP
}  // namespace SmartEye

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SmartEye_2eInviteSDP_2eproto__INCLUDED
